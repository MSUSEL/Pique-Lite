!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],n):n((e="undefined"!=typeof globalThis?globalThis:e||self).reactDropzone={},e.React,e.PropTypes)}(this,function(e,Y,n){"use strict";function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=t(Y),r=t(n);function i(n,e){var t,r=Object.keys(n);return Object.getOwnPropertySymbols&&(t=Object.getOwnPropertySymbols(n),e&&(t=t.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),r.push.apply(r,t)),r}function Z(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach(function(e){ee(n,e,t[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))})}return n}function ee(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ne(e,n){if(null==e)return{};var t,r=function(e,n){if(null==e)return{};for(var t,r={},o=Object.keys(e),i=0;i<o.length;i++)t=o[i],0<=n.indexOf(t)||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols)for(var o=Object.getOwnPropertySymbols(e),i=0;i<o.length;i++)t=o[i],0<=n.indexOf(t)||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t]);return r}function te(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,i=[],a=!0,u=!1;try{for(t=t.call(e);!(a=(r=t.next()).done)&&(i.push(r.value),!n||i.length!==n);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==t.return||t.return()}finally{if(u)throw o}}return i}}(e,n)||a(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function re(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,n){if(e){if("string"==typeof e)return u(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(t="Object"===t&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?u(e,n):void 0}}function u(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function l(e,a,u,l){return new(u=u||Promise)(function(t,n){function r(e){try{i(l.next(e))}catch(e){n(e)}}function o(e){try{i(l.throw(e))}catch(e){n(e)}}function i(e){var n;e.done?t(e.value):((n=e.value)instanceof u?n:new u(function(e){e(n)})).then(r,o)}i((l=l.apply(e,a||[])).next())})}function c(t,r){var o,i,a,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:n(0),throw:n(1),return:n(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function n(n){return function(e){return function(n){if(o)throw new TypeError("Generator is already executing.");for(;u;)try{if(o=1,i&&(a=2&n[0]?i.return:n[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,n[1])).done)return a;switch(i=0,(n=a?[2&n[0],a.value]:n)[0]){case 0:case 1:a=n;break;case 4:return u.label++,{value:n[1],done:!1};case 5:u.label++,i=n[1],n=[0];continue;case 7:n=u.ops.pop(),u.trys.pop();continue;default:if(!(a=0<(a=u.trys).length&&a[a.length-1])&&(6===n[0]||2===n[0])){u=0;continue}if(3===n[0]&&(!a||n[1]>a[0]&&n[1]<a[3])){u.label=n[1];break}if(6===n[0]&&u.label<a[1]){u.label=a[1],a=n;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(n);break}a[2]&&u.ops.pop(),u.trys.pop();continue}n=r.call(t,u)}catch(e){n=[6,e],i=0}finally{o=a=0}if(5&n[0])throw n[1];return{value:n[0]?n[1]:void 0,done:!0}}([n,e])}}}function f(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(function(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var r,o,i=t.call(e),a=[];try{for(;(void 0===n||0<n--)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return a}(arguments[n]));return e}var s=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function p(e,n){var t,r=function(e){var n=e.name;n&&-1!==n.lastIndexOf(".")&&!e.type&&(n=n.split(".").pop().toLowerCase(),(n=s.get(n))&&Object.defineProperty(e,"type",{value:n,writable:!1,configurable:!1,enumerable:!0}));return e}(e);return"string"!=typeof r.path&&(t=e.webkitRelativePath,Object.defineProperty(r,"path",{value:"string"==typeof n?n:"string"==typeof t&&0<t.length?t:e.name,writable:!1,configurable:!1,enumerable:!0})),r}var d=[".DS_Store","Thumbs.db"];function g(e){return e.filter(function(e){return-1===d.indexOf(e.name)})}function v(e){for(var n=[],t=0;t<e.length;t++){var r=e[t];n.push(r)}return n}function y(e){if("function"!=typeof e.webkitGetAsEntry)return m(e);var n=e.webkitGetAsEntry();return n&&n.isDirectory?h(n):m(e)}function m(e){var n=e.getAsFile();if(!n)return Promise.reject(e+" is not a File");n=p(n);return Promise.resolve(n)}function b(n){return l(this,void 0,void 0,function(){return c(this,function(e){return[2,(n.isDirectory?h:function(r){return l(this,void 0,void 0,function(){return c(this,function(e){return[2,new Promise(function(n,t){r.file(function(e){e=p(e,r.fullPath);n(e)},function(e){t(e)})})]})})})(n)]})})}function h(e){var n=e.createReader();return new Promise(function(i,a){var u=[];!function o(){var e=this;n.readEntries(function(r){return l(e,void 0,void 0,function(){var n,t;return c(this,function(e){switch(e.label){case 0:if(r.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(u)];case 2:return n=e.sent(),i(n),[3,4];case 3:return t=e.sent(),a(t),[3,4];case 4:return[3,6];case 5:t=Promise.all(r.map(b)),u.push(t),o(),e.label=6;case 6:return[2]}})})},function(e){a(e)})}()})}var D,w,F=(function(e){e.__esModule=!0,e.default=function(e,n){if(e&&n){var n=Array.isArray(n)?n:n.split(","),t=e.name||"",r=(e.type||"").toLowerCase(),o=r.replace(/\/.*$/,"");return n.some(function(e){e=e.trim().toLowerCase();return"."===e.charAt(0)?t.toLowerCase().endsWith(e):e.endsWith("/*")?o===e.replace(/\/.*$/,""):r===e})}return!0}}((D={exports:{}},D.exports)),D.exports),O=(w=F)&&w.__esModule&&Object.prototype.hasOwnProperty.call(w,"default")?w.default:w,j="file-invalid-type",x="file-too-large",A="file-too-small",E="too-many-files",n={FileInvalidType:j,FileTooLarge:x,FileTooSmall:A,TooManyFiles:E},k=function(e){e=Array.isArray(e)&&1===e.length?e[0]:e;e=Array.isArray(e)?"one of ".concat(e.join(", ")):e;return{code:j,message:"File type must be ".concat(e)}},P=function(e){return{code:x,message:"File is larger than ".concat(e," bytes")}},C=function(e){return{code:A,message:"File is smaller than ".concat(e," bytes")}},oe={code:E,message:"Too many files"};function ie(e,n){e="application/x-moz-file"===e.type||O(e,n);return[e,e?null:k(n)]}function ae(e,n,t){if(S(e.size))if(S(n)&&S(t)){if(e.size>t)return[!1,P(t)];if(e.size<n)return[!1,C(n)]}else{if(S(n)&&e.size<n)return[!1,C(n)];if(S(t)&&e.size>t)return[!1,P(t)]}return[!0,null]}function S(e){return null!=e}function ue(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function le(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function ce(e){e.preventDefault()}function fe(){for(var e=arguments.length,o=new Array(e),n=0;n<e;n++)o[n]=arguments[n];return function(n){for(var e=arguments.length,t=new Array(1<e?e-1:0),r=1;r<e;r++)t[r-1]=arguments[r];return o.some(function(e){return!ue(n)&&e&&e.apply(void 0,[n].concat(t)),ue(n)})}}var T=["children"],z=["open"],se=["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"],pe=["refKey","onChange","onClick"],E=Y.forwardRef(function(e,n){var t=e.children,e=R(ne(e,T)),r=e.open,e=ne(e,z);return Y.useImperativeHandle(n,function(){return{open:r}},[r]),o.default.createElement(Y.Fragment,null,t(Z(Z({},e),{},{open:r})))}),de={disabled:!(E.displayName="Dropzone"),getFilesFromEvent:function(t){return l(this,void 0,void 0,function(){return c(this,function(e){return[2,t.dataTransfer&&t.dataTransfer?function(t,r){return l(this,void 0,void 0,function(){var n;return c(this,function(e){switch(e.label){case 0:return t.items?(n=v(t.items).filter(function(e){return"file"===e.kind}),"drop"!==r?[2,n]:[4,Promise.all(n.map(y))]):[3,2];case 1:return[2,g(function t(e){return e.reduce(function(e,n){return f(e,Array.isArray(n)?t(n):[n])},[])}(e.sent()))];case 2:return[2,g(v(t.files).map(function(e){return p(e)}))]}})})}(t.dataTransfer,t.type):(null!==(n=t).target&&n.target.files?v(n.target.files):[]).map(function(e){return p(e)})];var n})})},maxSize:1/0,minSize:0,multiple:!0,maxFiles:0,preventDropOnDocument:!0,noClick:!1,noKeyboard:!1,noDrag:!1,noDragEventsBubbling:!1,validator:null};E.defaultProps=de;var ge={isFocused:!(E.propTypes={children:r.default.func,accept:r.default.oneOfType([r.default.string,r.default.arrayOf(r.default.string)]),multiple:r.default.bool,preventDropOnDocument:r.default.bool,noClick:r.default.bool,noKeyboard:r.default.bool,noDrag:r.default.bool,noDragEventsBubbling:r.default.bool,minSize:r.default.number,maxSize:r.default.number,maxFiles:r.default.number,disabled:r.default.bool,getFilesFromEvent:r.default.func,onFileDialogCancel:r.default.func,onDragEnter:r.default.func,onDragLeave:r.default.func,onDragOver:r.default.func,onDrop:r.default.func,onDropAccepted:r.default.func,onDropRejected:r.default.func,validator:r.default.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],fileRejections:[]};function R(){function e(){P&&setTimeout(function(){j.current&&(j.current.files.length||(E({type:"closeDialog"}),"function"==typeof y&&y()))},300)}var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=Z(Z({},de),n),l=t.accept,f=t.disabled,r=t.getFilesFromEvent,c=t.maxSize,s=t.minSize,o=t.multiple,i=t.maxFiles,a=t.onDragEnter,u=t.onDragLeave,p=t.onDragOver,d=t.onDrop,g=t.onDropAccepted,v=t.onDropRejected,y=t.onFileDialogCancel,m=t.preventDropOnDocument,b=t.noClick,h=t.noKeyboard,D=t.noDrag,w=t.noDragEventsBubbling,F=t.validator,O=Y.useRef(null),j=Y.useRef(null),x=te(Y.useReducer(ve,ge),2),A=x[0],E=x[1],k=A.isFocused,P=A.isFileDialogActive,C=A.draggedFiles,S=Y.useCallback(function(){j.current&&(E({type:"openDialog"}),j.current.value=null,j.current.click())},[E]);Y.useEffect(function(){return window.addEventListener("focus",e,!1),function(){window.removeEventListener("focus",e,!1)}},[j,P,y]);function T(e){O.current&&O.current.contains(e.target)||(e.preventDefault(),K.current=[])}var z=Y.useCallback(function(e){O.current&&O.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),S()))},[O,j]),R=Y.useCallback(function(){E({type:"focus"})},[]),L=Y.useCallback(function(){E({type:"blur"})},[]),I=Y.useCallback(function(){b||(!function(e){var n=0<arguments.length&&void 0!==e?e:window.navigator.userAgent;return-1!==(e=n).indexOf("MSIE")||-1!==e.indexOf("Trident/")||-1!==n.indexOf("Edge/")}()?S():setTimeout(S,0))},[j,b]),K=Y.useRef([]);Y.useEffect(function(){return m&&(document.addEventListener("dragover",ce,!1),document.addEventListener("drop",T,!1)),function(){m&&(document.removeEventListener("dragover",ce),document.removeEventListener("drop",T))}},[O,m]);function M(e){return f?null:e}function B(e){return h?null:M(e)}function _(e){return D?null:M(e)}var q,G,$,N,W=Y.useCallback(function(n){n.preventDefault(),n.persist(),Q(n),K.current=[].concat(re(K.current),[n.target]),le(n)&&Promise.resolve(r(n)).then(function(e){ue(n)&&!w||(E({draggedFiles:e,isDragActive:!0,type:"setDraggedFiles"}),a&&a(n))})},[r,a,w]),H=Y.useCallback(function(e){e.preventDefault(),e.persist(),Q(e);var n=le(e);if(n&&e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return n&&p&&p(e),!1},[p,w]),U=Y.useCallback(function(e){e.preventDefault(),e.persist(),Q(e);var n=K.current.filter(function(e){return O.current&&O.current.contains(e)}),t=n.indexOf(e.target);-1!==t&&n.splice(t,1),0<(K.current=n).length||(E({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),le(e)&&u&&u(e))},[O,u,w]),J=Y.useCallback(function(n){n.preventDefault(),n.persist(),Q(n),K.current=[],le(n)&&Promise.resolve(r(n)).then(function(e){var a,u;ue(n)&&!w||(a=[],u=[],e.forEach(function(e){var n=te(ie(e,l),2),t=n[0],r=n[1],o=te(ae(e,s,c),2),i=o[0],n=o[1],o=F?F(e):null;t&&i&&!o?a.push(e):(n=[r,n],o&&(n=n.concat(o)),u.push({file:e,errors:n.filter(function(e){return e})}))}),(!o&&1<a.length||o&&1<=i&&a.length>i)&&(a.forEach(function(e){u.push({file:e,errors:[oe]})}),a.splice(0)),E({acceptedFiles:a,fileRejections:u,type:"setFiles"}),d&&d(a,u,n),0<u.length&&v&&v(u,n),0<a.length&&g&&g(a,n))}),E({type:"reset"})},[o,l,s,c,i,r,d,g,v,w,F]),Q=function(e){w&&e.stopPropagation()},V=Y.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,t=void 0===n?"ref":n,r=e.onKeyDown,o=e.onFocus,i=e.onBlur,a=e.onClick,u=e.onDragEnter,l=e.onDragOver,c=e.onDragLeave,n=e.onDrop,e=ne(e,se);return Z(Z(ee({onKeyDown:B(fe(r,z)),onFocus:B(fe(o,R)),onBlur:B(fe(i,L)),onClick:M(fe(a,I)),onDragEnter:_(fe(u,W)),onDragOver:_(fe(l,H)),onDragLeave:_(fe(c,U)),onDrop:_(fe(n,J))},t,O),f||h?{}:{tabIndex:0}),e)}},[O,z,R,L,I,W,H,U,J,h,D,f]),X=Y.useCallback(function(e){e.stopPropagation()},[]),n=Y.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},n=e.refKey,t=void 0===n?"ref":n,r=e.onChange,n=e.onClick,e=ne(e,pe);return Z(Z({},ee({accept:l,multiple:o,type:"file",style:{display:"none"},onChange:M(fe(r,J)),onClick:M(fe(n,X)),autoComplete:"off",tabIndex:-1},t,j)),e)}},[j,l,o,J,f]),t=C.length,q=0<t&&(q=(x={files:C,accept:l,minSize:s,maxSize:c,multiple:o,maxFiles:i}).files,G=x.accept,$=x.minSize,N=x.maxSize,C=x.multiple,x=x.maxFiles,!(!C&&1<q.length||C&&1<=x&&q.length>x)&&q.every(function(e){var n=te(ie(e,G),1)[0],e=te(ae(e,$,N),1)[0];return n&&e})),t=0<t&&!q;return Z(Z({},A),{},{isDragAccept:q,isDragReject:t,isFocused:k&&!f,getRootProps:V,getInputProps:n,rootRef:O,inputRef:j,open:M(S)})}function ve(e,n){switch(n.type){case"focus":return Z(Z({},e),{},{isFocused:!0});case"blur":return Z(Z({},e),{},{isFocused:!1});case"openDialog":return Z(Z({},e),{},{isFileDialogActive:!0});case"closeDialog":return Z(Z({},e),{},{isFileDialogActive:!1});case"setDraggedFiles":var t=n.isDragActive,r=n.draggedFiles;return Z(Z({},e),{},{draggedFiles:r,isDragActive:t});case"setFiles":return Z(Z({},e),{},{acceptedFiles:n.acceptedFiles,fileRejections:n.fileRejections});case"reset":return Z({},ge);default:return e}}e.ErrorCode=n,e.default=E,e.useDropzone=R,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
