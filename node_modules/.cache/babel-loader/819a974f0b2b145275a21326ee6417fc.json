{"ast":null,"code":"// read the contents of each file\nexport const readFileContents = async file => {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader(); // start reading the file, once done, the result contains the content of the file as text string\n\n    fileReader.onload = () => {\n      // result is a domstring, parse\n      if (isJsonFile(fileReader.result)) {\n        resolve(JSON.parse(fileReader.result));\n      }\n    };\n\n    fileReader.onerror = reject;\n    fileReader.readAsText(file);\n  });\n};\n\nconst isJsonFile = jsonString => {\n  try {\n    return JSON.parse(jsonString) && !!jsonString;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const readSingleFileContent = async (file, setProcess) => {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader(); // start reading the file, once done, the result contains the content of the file as text string\n\n    fileReader.onload = () => {\n      // result is a domstring, parse\n      if (fileReader.result === null) {\n        alert(\"File has not content!\");\n      } else {\n        resolve(JSON.parse(fileReader.result));\n      }\n    };\n\n    fileReader.onerror = reject;\n\n    fileReader.onprogress = function (data) {\n      if (data.lengthComputable) {\n        let result = parseInt(data.loaded / data.total * 100, 10);\n        setProcess(result);\n      }\n    };\n\n    fileReader.readAsText(file);\n  });\n};\nexport const readAllFiles = async (allFiles, setProcess) => {\n  const results = await Promise.all(allFiles.map(async (file, index) => {\n    const fileContent = await readSignleFileContent(file, setProcess);\n    return {\n      \"fileName\": file.name,\n      \"fileContent\": fileContent,\n      \"versionNumber\": index + 1\n    };\n  }));\n  return results;\n};","map":{"version":3,"sources":["C:/Users/Derek Reimanis/Documents/msusel/Pique-Lite/src/utils/fileUpload.utils.js"],"names":["readFileContents","file","Promise","resolve","reject","fileReader","FileReader","onload","isJsonFile","result","JSON","parse","onerror","readAsText","jsonString","e","readSingleFileContent","setProcess","alert","onprogress","data","lengthComputable","parseInt","loaded","total","readAllFiles","allFiles","results","all","map","index","fileContent","readSignleFileContent","name"],"mappings":"AACQ;AACA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AAC5C,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB,CADoC,CAEpC;;AAEAD,IAAAA,UAAU,CAACE,MAAX,GAAoB,MAAM;AACtB;AACA,UAAGC,UAAU,CAACH,UAAU,CAACI,MAAZ,CAAb,EAAkC;AAC9BN,QAAAA,OAAO,CAACO,IAAI,CAACC,KAAL,CAAWN,UAAU,CAACI,MAAtB,CAAD,CAAP;AACH;AACJ,KALD;;AAMAJ,IAAAA,UAAU,CAACO,OAAX,GAAqBR,MAArB;AACAC,IAAAA,UAAU,CAACQ,UAAX,CAAsBZ,IAAtB;AACH,GAZM,CAAP;AAaH,CAdM;;AAgBP,MAAMO,UAAU,GAAIM,UAAD,IAAgB;AAC/B,MAAI;AACA,WAAQJ,IAAI,CAACC,KAAL,CAAWG,UAAX,KAA0B,CAAC,CAACA,UAApC;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACR,WAAO,KAAP;AACH;AACJ,CAND;;AAQA,OAAQ,MAAMC,qBAAqB,GAAG,OAAOf,IAAP,EAAagB,UAAb,KAA4B;AAC9D,SAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB,CADoC,CAEpC;;AAEAD,IAAAA,UAAU,CAACE,MAAX,GAAoB,MAAM;AACtB;AACA,UAAIF,UAAU,CAACI,MAAX,KAAsB,IAA1B,EAAgC;AAC5BS,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACH,OAFD,MAEK;AACDf,QAAAA,OAAO,CAACO,IAAI,CAACC,KAAL,CAAWN,UAAU,CAACI,MAAtB,CAAD,CAAP;AACH;AACJ,KAPD;;AAQAJ,IAAAA,UAAU,CAACO,OAAX,GAAqBR,MAArB;;AACAC,IAAAA,UAAU,CAACc,UAAX,GAAuB,UAASC,IAAT,EAAe;AAClC,UAAGA,IAAI,CAACC,gBAAR,EAA0B;AACtB,YAAIZ,MAAM,GAAGa,QAAQ,CAAGF,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACI,KAApB,GAA6B,GAA/B,EAAqC,EAArC,CAArB;AACAP,QAAAA,UAAU,CAACR,MAAD,CAAV;AACH;AACJ,KALD;;AAOAJ,IAAAA,UAAU,CAACQ,UAAX,CAAsBZ,IAAtB;AAGH,GAvBM,CAAP;AAwBH,CAzBO;AA4BR,OAAO,MAAMwB,YAAY,GAAG,OAAOC,QAAP,EAAiBT,UAAjB,KAAgC;AACxD,QAAMU,OAAO,GAAG,MAAMzB,OAAO,CAAC0B,GAAR,CAClBF,QAAQ,CAACG,GAAT,CAAa,OAAO5B,IAAP,EAAa6B,KAAb,KAAuB;AACpC,UAAMC,WAAW,GAAE,MAAMC,qBAAqB,CAAC/B,IAAD,EAAOgB,UAAP,CAA9C;AACA,WAAO;AACC,kBAAYhB,IAAI,CAACgC,IADlB;AAEC,qBAAeF,WAFhB;AAGC,uBAAiBD,KAAK,GAAG;AAH1B,KAAP;AAKC,GAPD,CADkB,CAAtB;AAUA,SAAOH,OAAP;AACH,CAZM","sourcesContent":["\n        // read the contents of each file\n        export const readFileContents = async (file) => {\n            return new Promise((resolve, reject) => {\n                let fileReader = new FileReader();\n                // start reading the file, once done, the result contains the content of the file as text string\n               \n                fileReader.onload = () => {\n                    // result is a domstring, parse\n                    if(isJsonFile(fileReader.result)) {\n                        resolve(JSON.parse(fileReader.result));\n                    }\n                };\n                fileReader.onerror = reject;\n                fileReader.readAsText(file);\n            })\n        }\n\n        const isJsonFile = (jsonString) => {\n            try {\n                return (JSON.parse(jsonString) && !!jsonString)\n            } catch (e) {\n                return false\n            }\n        }\n\n        export  const readSingleFileContent = async (file, setProcess) => {\n            return new Promise((resolve, reject) => {\n                let fileReader = new FileReader();\n                // start reading the file, once done, the result contains the content of the file as text string\n               \n                fileReader.onload = () => {\n                    // result is a domstring, parse\n                    if (fileReader.result === null) {\n                        alert(\"File has not content!\")\n                    }else{\n                        resolve(JSON.parse(fileReader.result));\n                    }\n                };\n                fileReader.onerror = reject;\n                fileReader.onprogress= function(data) {\n                    if(data.lengthComputable) {\n                        let result = parseInt(((data.loaded / data.total) * 100), 10 );\n                        setProcess(result)\n                    }\n                }\n              \n                fileReader.readAsText(file);\n               \n               \n            })\n        }\n\n\n        export const readAllFiles = async (allFiles, setProcess) => {\n            const results = await Promise.all(\n                allFiles.map(async (file, index) => {\n                const fileContent= await readSignleFileContent(file, setProcess);\n                return {\n                        \"fileName\": file.name,\n                        \"fileContent\": fileContent,\n                        \"versionNumber\": index + 1\n                    }\n                })\n            );\n            return results;\n        }"]},"metadata":{},"sourceType":"module"}