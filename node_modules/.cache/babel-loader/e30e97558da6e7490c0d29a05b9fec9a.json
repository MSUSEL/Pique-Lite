{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek Reimanis\\\\Documents\\\\msusel\\\\Pique-Lite\\\\src\\\\components\\\\treeVisualizer\\\\TreeVisualizer.component.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCenteredTree } from './TreeVisualizerHelper.utils';\nimport Tree from \"react-d3-tree\";\nimport * as s from '../../utils/color';\nimport { createStructuredSelector } from 'reselect';\nimport { selectNeighborNodes, selectOrientation, selectRiskLevel, selectTree } from '../../redux/piqueTree/PiqueTree.selector';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyles = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\n\nconst nodeAllColor = score => {\n  const num = Number(score);\n\n  if (num <= 0.3) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Red.value\n    };\n  } else if (num > 0.3 && num <= 0.5) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.DarkRed.value\n    };\n  } else if (num > 0.5 && num <= 0.7) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Yellow.value\n    };\n  } else if (num > 0.7 && num <= 1.0) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Green.value\n    };\n  } else {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: \"grey\"\n    };\n  }\n}; // change the coloe of the tree\n\n\nconst nodeRiskColor = (score, riskLevel) => {\n  const num = Number(score);\n\n  if (num <= 0.3 && riskLevel === s.Red.name) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Red.value\n    };\n  } else if (num > 0.3 && num <= 0.5 && riskLevel === s.DarkRed.name) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.DarkRed.value\n    };\n  } else if (num > 0.5 && num <= 0.7 && riskLevel === s.Yellow.name) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Yellow.value\n    };\n  } else if (num > 0.7 && num <= 1.0 && riskLevel === s.Green.name) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Green.value\n    };\n  } else {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: \"grey\"\n    };\n  }\n}; // Here we're using `renderCustomNodeElement` to represent each node\n// as an SVG `rect` instead of the default `circle`.\n\n\nconst renderForeignObjectNode = ({\n  nodeDatum,\n  toggleNode,\n  foreignObjectProps,\n  riskLevel\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n    r: 15\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", { ...foreignObjectProps,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: riskLevel ? nodeRiskColor(nodeDatum.value, riskLevel) : nodeAllColor(nodeDatum.value),\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"name: \" + nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), \"//\", /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"value: \" + nodeDatum.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), nodeDatum.children && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          width: \"100%\",\n          backgroundColor: \"#B9B7BD\"\n        },\n        onClick: toggleNode,\n        children: nodeDatum.__rd3t.collapsed ? \"Expand\" : \"Collapse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 48,\n  columnNumber: 5\n}, this);\n\nconst TreeVisualizer = ({\n  riskLevel,\n  tree,\n  orientation,\n  collapseNeighbornodes\n}) => {\n  _s();\n\n  const [translate, containerRef] = useCenteredTree();\n  const nodeSize = {\n    x: 200,\n    y: 200\n  };\n  const foreignObjectProps = {\n    width: nodeSize.x,\n    height: nodeSize.y,\n    x: 20\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      data: tree,\n      translate: translate,\n      orientation: orientation,\n      nodeSize: nodeSize,\n      shouldCollapseNeighborNodes: collapseNeighbornodes,\n      renderCustomNodeElement: rd3tProps => renderForeignObjectNode({ ...rd3tProps,\n        foreignObjectProps,\n        riskLevel\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TreeVisualizer, \"9B25YRDZ5t4fkTB737Vl0GrOdiQ=\", false, function () {\n  return [useCenteredTree];\n});\n\n_c = TreeVisualizer;\nconst mapStateToProps = createStructuredSelector({\n  tree: selectTree,\n  riskLevel: selectRiskLevel,\n  orientation: selectOrientation,\n  neighborNodes: selectNeighborNodes\n});\nexport default connect(mapStateToProps)(TreeVisualizer);\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"sources":["C:/Users/Derek Reimanis/Documents/msusel/Pique-Lite/src/components/treeVisualizer/TreeVisualizer.component.js"],"names":["React","useCenteredTree","Tree","s","createStructuredSelector","selectNeighborNodes","selectOrientation","selectRiskLevel","selectTree","connect","containerStyles","width","height","nodeAllColor","score","num","Number","border","backgroundColor","Red","value","DarkRed","Yellow","Green","nodeRiskColor","riskLevel","name","renderForeignObjectNode","nodeDatum","toggleNode","foreignObjectProps","textAlign","children","__rd3t","collapsed","TreeVisualizer","tree","orientation","collapseNeighbornodes","translate","containerRef","nodeSize","x","y","rd3tProps","mapStateToProps","neighborNodes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useCenteredTree } from './TreeVisualizerHelper.utils'\nimport Tree from \"react-d3-tree\";\nimport * as s from '../../utils/color'\nimport { createStructuredSelector } from 'reselect';\nimport { selectNeighborNodes, selectOrientation, selectRiskLevel, selectTree } from '../../redux/piqueTree/PiqueTree.selector'\nimport { connect } from 'react-redux';\n\nconst containerStyles = {\n    width: \"100vw\",\n    height: \"100vh\"\n};\n\nconst nodeAllColor = (score) => {\n    const num = Number(score)\n     if (num <= 0.3 ){\n       return {border: \"1px solid black\", backgroundColor: s.Red.value}\n     } else if ( num > 0.3 && num <= 0.5 ){\n       return {border: \"1px solid black\", backgroundColor: s.DarkRed.value}\n     }else if ( num > 0.5 && num <= 0.7) {\n      return {border: \"1px solid black\", backgroundColor: s.Yellow.value}\n    }else if ( num > 0.7 && num <= 1.0 ) {\n      return {border: \"1px solid black\", backgroundColor: s.Green.value}\n    }else{\n      return {border: \"1px solid black\", backgroundColor: \"grey\"}\n    }\n  }\n\n  // change the coloe of the tree\n  const nodeRiskColor = (score, riskLevel) => {\n    const num = Number(score);\n    if (num <= 0.3 && riskLevel === s.Red.name) {\n      return {border: \"1px solid black\", backgroundColor: s.Red.value}\n    } else if ( num > 0.3 && num <= 0.5 && riskLevel === s.DarkRed.name) {\n      return {border: \"1px solid black\", backgroundColor: s.DarkRed.value}\n    } else if ( num > 0.5 && num <= 0.7 && riskLevel === s.Yellow.name) {\n      return {border: \"1px solid black\", backgroundColor: s.Yellow.value}\n    } else if ( num > 0.7 && num <= 1.0 && riskLevel === s.Green.name) {\n      return {border: \"1px solid black\", backgroundColor: s.Green.value}\n    } else {\n      return {border: \"1px solid black\", backgroundColor: \"grey\"}\n    }\n  }\n  \n  // Here we're using `renderCustomNodeElement` to represent each node\n  // as an SVG `rect` instead of the default `circle`.\n  const renderForeignObjectNode = ({ nodeDatum, toggleNode, foreignObjectProps, riskLevel}) => (\n    <g>\n      <circle r={15}></circle>\n      <foreignObject {...foreignObjectProps}>\n      <div style={\n        riskLevel ? nodeRiskColor(nodeDatum.value, riskLevel) :\n        nodeAllColor(nodeDatum.value)}>\n      <h3 style={{ textAlign: \"center\" }}>{\"name: \" + nodeDatum.name}</h3>\n      //<h3 style={{ textAlign: \"center\" }}>{\"value: \" + nodeDatum.value}</h3>\n      {nodeDatum.children && (\n        <button style={{ width: \"100%\", backgroundColor: \"#B9B7BD\"}} onClick={toggleNode}>\n          {nodeDatum.__rd3t.collapsed ? \"Expand\" : \"Collapse\"}\n        </button>\n      )}\n    </div>\n      </foreignObject>\n    </g>\n  );\n\nconst TreeVisualizer = ({riskLevel, tree, orientation, collapseNeighbornodes}) => {\n    const [translate, containerRef] = useCenteredTree();\n    const nodeSize = { x: 200, y: 200 };\n    const foreignObjectProps = { width: nodeSize.x, height: nodeSize.y, x: 20 };\n    return (\n    <div style={containerStyles} ref={containerRef}>\n      <Tree\n        data={tree}\n        translate={translate}\n        orientation={orientation}\n        nodeSize={nodeSize}\n        shouldCollapseNeighborNodes={collapseNeighbornodes}\n        renderCustomNodeElement={(rd3tProps) =>\n          renderForeignObjectNode({ ...rd3tProps, foreignObjectProps, riskLevel})\n        }\n      />\n    </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n    tree: selectTree, \n    riskLevel: selectRiskLevel,\n    orientation: selectOrientation,\n    neighborNodes: selectNeighborNodes\n})\nexport default connect(mapStateToProps)(TreeVisualizer)"]},"metadata":{},"sourceType":"module"}