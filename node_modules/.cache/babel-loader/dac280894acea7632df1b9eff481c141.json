{"ast":null,"code":"var _jsxFileName = \"/Users/xuyingwang/Documents/Pique-Lite/src/components/treeVisualizer/TreeVisualizer.component.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useCenteredTree } from './TreeVisualizerHelper.utils';\nimport Tree from \"react-d3-tree\";\nimport * as s from '../../utils/color';\nimport { createStructuredSelector } from 'reselect';\nimport { selectNeighborNodes, selectOrientation, selectRiskLevel, selectTree } from '../../redux/piqueTree/PiqueTree.selector';\nimport { connect } from 'react-redux';\nimport { RiFolderInfoLine } from 'react-icons/ri';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyles = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\n\nconst nodeAllColor = score => {\n  const num = Number(score);\n\n  if (num <= 0.2) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Severe.color\n    };\n  } else if (num > 0.2 && num <= 0.4) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.High.color\n    };\n  } else if (num > 0.4 && num <= 0.6) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Elevated.color\n    };\n  } else if (num > 0.6 && num <= 0.8) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Guarded.color\n    };\n  } else if (num > 0.8 && num <= 1.0) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Low.color\n    };\n  } else {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: \"grey\"\n    };\n  }\n}; // change the coloe of the tree\n\n\nconst nodeRiskColor = (score, riskLevel) => {\n  const num = Number(score);\n\n  if (num <= 0.2 && riskLevel === s.Severe.color) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Severe.color\n    };\n  } else if (num > 0.2 && num <= 0.4 && riskLevel === s.High.color) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.High.color\n    };\n  } else if (num > 0.4 && num <= 0.6 && riskLevel === s.Elevated.color) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Elevated.color\n    };\n  } else if (num > 0.6 && num <= 0.8 && riskLevel === s.Guarded.color) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Guarded.color\n    };\n  } else if (num > 0.8 && num <= 1.0 && riskLevel === s.Low.color) {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: s.Low.color\n    };\n  } else {\n    return {\n      border: \"1px solid black\",\n      backgroundColor: \"grey\"\n    };\n  }\n}; // Here we're using `renderCustomNodeElement` to represent each node\n// as an SVG `rect` instead of the default `circle`.\n\n\nconst renderForeignObjectNode = ({\n  nodeDatum,\n  toggleNode,\n  foreignObjectProps,\n  riskLevel\n}) => /*#__PURE__*/_jsxDEV(\"g\", {\n  children: [/*#__PURE__*/_jsxDEV(\"text\", {\n    fill: \"black\",\n    strokeWidth: \"1\",\n    x: \"20\",\n    y: \"-20\",\n    children: \"edge: 0.45\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n    r: \"5\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", { ...foreignObjectProps,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: riskLevel ? nodeRiskColor(nodeDatum.value, riskLevel) : nodeAllColor(nodeDatum.value),\n      children: [/*#__PURE__*/_jsxDEV(RiFolderInfoLine, {\n        style: {\n          fontSize: \"30px\",\n          color: \"black\"\n        },\n        onClick: toggleNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\",\n          paddingLeft: \"5px\"\n        },\n        children: \"name: \" + nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\",\n          paddingLeft: \"5px\"\n        },\n        children: \"value: \" + nodeDatum.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), nodeDatum.children && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          width: \"100%\",\n          backgroundColor: \"#B9B7BD\"\n        },\n        onClick: toggleNode,\n        children: nodeDatum.__rd3t.collapsed ? \"Expand\" : \"Collapse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 55,\n  columnNumber: 5\n}, this);\n\nconst TreeVisualizer = ({\n  riskLevel,\n  tree,\n  orientation,\n  collapseNeighbornodes\n}) => {\n  _s();\n\n  const [translate, containerRef] = useCenteredTree();\n  const nodeSize = {\n    x: 200,\n    y: 200\n  };\n  const foreignObjectProps = {\n    width: nodeSize.x,\n    height: nodeSize.y,\n    x: 20\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      data: tree,\n      translate: translate,\n      orientation: orientation,\n      nodeSize: nodeSize,\n      shouldCollapseNeighborNodes: collapseNeighbornodes,\n      renderCustomNodeElement: rd3tProps => renderForeignObjectNode({ ...rd3tProps,\n        foreignObjectProps,\n        riskLevel\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TreeVisualizer, \"9B25YRDZ5t4fkTB737Vl0GrOdiQ=\", false, function () {\n  return [useCenteredTree];\n});\n\n_c = TreeVisualizer;\nconst mapStateToProps = createStructuredSelector({\n  tree: selectTree,\n  riskLevel: selectRiskLevel,\n  orientation: selectOrientation,\n  neighborNodes: selectNeighborNodes\n});\nexport default connect(mapStateToProps)(TreeVisualizer);\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"sources":["/Users/xuyingwang/Documents/Pique-Lite/src/components/treeVisualizer/TreeVisualizer.component.js"],"names":["React","useCenteredTree","Tree","s","createStructuredSelector","selectNeighborNodes","selectOrientation","selectRiskLevel","selectTree","connect","RiFolderInfoLine","containerStyles","width","height","nodeAllColor","score","num","Number","border","backgroundColor","Severe","color","High","Elevated","Guarded","Low","nodeRiskColor","riskLevel","renderForeignObjectNode","nodeDatum","toggleNode","foreignObjectProps","value","fontSize","textAlign","paddingLeft","name","children","__rd3t","collapsed","TreeVisualizer","tree","orientation","collapseNeighbornodes","translate","containerRef","nodeSize","x","y","rd3tProps","mapStateToProps","neighborNodes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useCenteredTree } from './TreeVisualizerHelper.utils'\nimport Tree from \"react-d3-tree\";\nimport * as s from '../../utils/color'\nimport { createStructuredSelector } from 'reselect';\nimport { selectNeighborNodes, selectOrientation, selectRiskLevel, selectTree } from '../../redux/piqueTree/PiqueTree.selector'\nimport { connect } from 'react-redux';\nimport {RiFolderInfoLine} from 'react-icons/ri'\n\nconst containerStyles = {\n    width: \"100vw\",\n    height: \"100vh\"\n};\n\nconst nodeAllColor = (score) => {\n    const num = Number(score)\n     if (num <= 0.2 ){\n       return {border: \"1px solid black\", backgroundColor: s.Severe.color}\n     } else if ( num > 0.2 && num <= 0.4 ){\n       return {border: \"1px solid black\", backgroundColor: s.High.color}\n     }else if ( num > 0.4 && num <= 0.6) {\n      return {border: \"1px solid black\", backgroundColor: s.Elevated.color}\n    }else if ( num > 0.6 && num <= 0.8) {\n      return {border: \"1px solid black\", backgroundColor: s.Guarded.color}\n    }else if ( num > 0.8 && num <= 1.0 ) {\n      return {border: \"1px solid black\", backgroundColor: s.Low.color}\n    }\n    else{\n      return {border: \"1px solid black\", backgroundColor: \"grey\"}\n    }\n  }\n\n  // change the coloe of the tree\n  const nodeRiskColor = (score, riskLevel) => {\n    const num = Number(score);\n    if (num <= 0.2 && riskLevel===s.Severe.color){\n      return {border: \"1px solid black\", backgroundColor: s.Severe.color}\n    } else if ( num > 0.2 && num <= 0.4  && riskLevel===s.High.color){\n      return {border: \"1px solid black\", backgroundColor: s.High.color}\n    }else if ( num > 0.4 && num <= 0.6 && riskLevel===s.Elevated.color) {\n     return {border: \"1px solid black\", backgroundColor: s.Elevated.color}\n   }else if ( num > 0.6 && num <= 0.8 && riskLevel===s.Guarded.color) {\n     return {border: \"1px solid black\", backgroundColor: s.Guarded.color}\n   }else if ( num > 0.8 && num <= 1.0 && riskLevel===s.Low.color) {\n     return {border: \"1px solid black\", backgroundColor: s.Low.color}\n   }\n   else{\n     return {border: \"1px solid black\", backgroundColor: \"grey\"}\n   }\n  }\n  \n  // Here we're using `renderCustomNodeElement` to represent each node\n  // as an SVG `rect` instead of the default `circle`.\n  const renderForeignObjectNode = ({ nodeDatum, toggleNode, foreignObjectProps, riskLevel}) => (\n    <g>\n      <text fill=\"black\" strokeWidth=\"1\" x=\"20\" y=\"-20\">edge: 0.45</text>\n      <circle r=\"5\"/>\n      <foreignObject {...foreignObjectProps}>\n        <div style={  riskLevel ? nodeRiskColor(nodeDatum.value, riskLevel) : nodeAllColor(nodeDatum.value)}>\n          <RiFolderInfoLine style={{fontSize: \"30px\", color: \"black\"}} onClick={toggleNode}/>\n          <p style={{ textAlign: \"center\", paddingLeft: \"5px\"}}>{\"name: \" + nodeDatum.name}</p>\n          <p style={{ textAlign: \"center\", paddingLeft: \"5px\"}}>{\"value: \" + nodeDatum.value}</p>\n          {nodeDatum.children && (\n          <button style={{ width: \"100%\", backgroundColor: \"#B9B7BD\"}} onClick={toggleNode}>\n            {nodeDatum.__rd3t.collapsed ? \"Expand\" : \"Collapse\"}\n          </button>\n          )}\n        </div>\n    </foreignObject>\n  </g>\n  );\n\nconst TreeVisualizer = ({riskLevel, tree, orientation, collapseNeighbornodes}) => {\n    const [translate, containerRef] = useCenteredTree();\n    const nodeSize = { x: 200, y: 200 };\n    const foreignObjectProps = { width: nodeSize.x, height: nodeSize.y, x: 20 };\n  \n    return (\n    <div style={containerStyles} ref={containerRef}>\n      <Tree\n        data={tree}\n        translate={translate}\n        orientation={orientation}\n        nodeSize={nodeSize}\n        shouldCollapseNeighborNodes={collapseNeighbornodes}\n        renderCustomNodeElement={(rd3tProps) =>\n          renderForeignObjectNode({...rd3tProps, foreignObjectProps, riskLevel})\n        }\n      />\n    </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n    tree: selectTree, \n    riskLevel: selectRiskLevel,\n    orientation: selectOrientation,\n    neighborNodes: selectNeighborNodes\n})\nexport default connect(mapStateToProps)(TreeVisualizer)"]},"metadata":{},"sourceType":"module"}