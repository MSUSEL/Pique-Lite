{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xuying Wang Swift\\\\Desktop\\\\msu-pique-lite\\\\Pique-Lite\\\\src\\\\components\\\\pop-up\\\\MultipleFileUpload.component.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { setProjects } from '../../redux/piqueTree/PiqueTree.actions';\nimport { readAllFiles } from '../../utils/fileUpload.utils';\nimport { LoaderWrapper, Label, Input, ProgressResult } from './MultipleFileUpload.styles';\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\nimport { Line } from 'rc-progress';\nimport { Green } from '../../utils/color';\nimport FromInput from '../formInput/FormInput.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultipleFilesUpload = ({\n  projects,\n  setProjects\n}) => {\n  _s();\n\n  const [progress, setProcess] = React.useState(0);\n\n  const handleUpload = async e => {\n    let allFiles = [];\n    [...e.target.files].filter(file => file.size !== 0).map(file => allFiles.push(file));\n    const results = await readAllFiles(allFiles, setProcess);\n    setProjects(results);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoaderWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Upload Multiple Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"file\",\n          accept: \".json\",\n          multiple: true,\n          onChange: handleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FromInput, {\n        type: \"text\",\n        label: \"Quarter Number\",\n        name: \"quarter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), projects && progress ? projects.map((file, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"v\", file.versionNumber, \" \", file.fileName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          percent: progress,\n          strokeWidth: \"1\",\n          strokeColor: Green.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 33\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }, this);\n    }) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MultipleFilesUpload, \"hriIXiEsuh3JnQC3910o+Vz/lbA=\");\n\n_c = MultipleFilesUpload;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setProjects: data => dispatch(setProjects(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultipleFilesUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"MultipleFilesUpload\");","map":{"version":3,"sources":["C:/Users/Xuying Wang Swift/Desktop/msu-pique-lite/Pique-Lite/src/components/pop-up/MultipleFileUpload.component.js"],"names":["React","connect","createStructuredSelector","setProjects","readAllFiles","LoaderWrapper","Label","Input","ProgressResult","selectProjects","Line","Green","FromInput","MultipleFilesUpload","projects","progress","setProcess","useState","handleUpload","e","allFiles","target","files","filter","file","size","map","push","results","index","versionNumber","fileName","value","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAAUC,WAAV,QAA6B,yCAA7B;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,cAAtC,QAA2D,6BAA3D;AACA,SAASC,cAAT,QAA+B,0CAA/B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;;;AAGA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWX,EAAAA;AAAX,CAAD,KAA6B;AAAA;;AAErD,QAAM,CAACY,QAAD,EAAWC,UAAX,IAAyBhB,KAAK,CAACiB,QAAN,CAAe,CAAf,CAA/B;;AAEA,QAAMC,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9B,QAAIC,QAAQ,GAAG,EAAf;AACA,KAAC,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAb,EAAoBC,MAApB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,CAAjD,EAAoDC,GAApD,CAAwDF,IAAI,IAAGJ,QAAQ,CAACO,IAAT,CAAcH,IAAd,CAA/D;AACA,UAAMI,OAAO,GAAG,MAAMxB,YAAY,CAACgB,QAAD,EAAWJ,UAAX,CAAlC;AACAb,IAAAA,WAAW,CAACyB,OAAD,CAAX;AACH,GALD;;AAOA,sBACI;AAAA,4BACI,QAAC,aAAD;AAAA,8BACI,QAAC,KAAD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,MAAM,EAAC,OAFX;AAGI,UAAA,QAAQ,EAAE,IAHd;AAII,UAAA,QAAQ,EAAEV;AAJd;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAUI,QAAC,SAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAE,gBAFX;AAGI,QAAA,IAAI,EAAC;AAHT;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAiBSJ,QAAQ,IAAIC,QAAZ,GACGD,QAAQ,CAACY,GAAT,CAAa,CAACF,IAAD,EAAOK,KAAP,KAAiB;AAC1B,0BACI;AAAA,gCACI;AAAA,0BAAKL,IAAI,CAACM,aAAV,OAA0BN,IAAI,CAACO,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD;AAAM,UAAA,OAAO,EAAEhB,QAAf;AAAyB,UAAA,WAAW,EAAC,GAArC;AAAyC,UAAA,WAAW,EAAEJ,KAAK,CAACqB;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUH,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAMH,KAPD,CADH,GASG,IA1BZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH,CA3CD;;GAAMhB,mB;;KAAAA,mB;AA6CN,MAAMoB,eAAe,GAAG/B,wBAAwB,CAAC;AAC/CY,EAAAA,QAAQ,EAAEL;AADqC,CAAD,CAAhD;;AAIA,MAAMyB,kBAAkB,GAAGC,QAAQ,KAAK;AACpChC,EAAAA,WAAW,EAAEiC,IAAI,IAAID,QAAQ,CAAChC,WAAW,CAACiC,IAAD,CAAZ;AADO,CAAL,CAAnC;;AAKA,eAAenC,OAAO,CAACgC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CrB,mBAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport {  setProjects } from '../../redux/piqueTree/PiqueTree.actions';\r\nimport { readAllFiles } from '../../utils/fileUpload.utils';\r\n\r\nimport { LoaderWrapper, Label, Input, ProgressResult} from './MultipleFileUpload.styles';\r\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\r\nimport { Line } from 'rc-progress';\r\nimport { Green } from '../../utils/color';\r\n\r\nimport FromInput from '../formInput/FormInput.component';\r\n\r\n\r\nconst MultipleFilesUpload = ({projects, setProjects}) => {\r\n\r\n    const [progress, setProcess] = React.useState(0)\r\n\r\n    const handleUpload = async (e) => {\r\n        let allFiles = [];\r\n        [...e.target.files].filter(file => file.size !== 0).map(file=> allFiles.push(file))\r\n        const results = await readAllFiles(allFiles, setProcess);\r\n        setProjects(results)\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n            <LoaderWrapper>\r\n                <Label>\r\n                    <i>Upload Multiple Files</i>\r\n                    <Input \r\n                        type=\"file\" \r\n                        accept=\".json\" \r\n                        multiple={true} \r\n                        onChange={handleUpload}\r\n                    />\r\n                </Label>\r\n                <FromInput\r\n                    type='text'\r\n                    label={\"Quarter Number\"}\r\n                    name=\"quarter\"\r\n                />\r\n            </LoaderWrapper>\r\n                {projects && progress ? (\r\n                    projects.map((file, index) => {\r\n                        return (\r\n                            <div key={index}>\r\n                                <p>v{file.versionNumber} {file.fileName}</p>\r\n                                <Line percent={progress} strokeWidth=\"1\" strokeColor={Green.value}/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                ) : null}\r\n\r\n        </div>\r\n\r\n     )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  projects: selectProjects\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setProjects: data => dispatch(setProjects(data)),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MultipleFilesUpload)"]},"metadata":{},"sourceType":"module"}