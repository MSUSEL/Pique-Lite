{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek Reimanis\\\\Documents\\\\msusel\\\\Pique-Lite\\\\src\\\\components\\\\pop-up\\\\SingleFileUpload.component.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { removeFile, setProjects, setVersions } from \"../../redux/piqueTree/PiqueTree.actions\";\nimport { selectProjects, selectVersions } from \"../../redux/piqueTree/PiqueTree.selector\";\nimport { LoaderWrapper, Input, Label, SubmitButton, ResetButton } from './SingleFileUpload.styles';\nimport { readSingleFileContent } from \"../../utils/fileUpload.utils\";\nimport FormInput from \"../formInput/FormInput.component\";\nimport { Line } from 'rc-progress';\nimport { Green } from \"../../utils/color\";\nimport { useAlert } from 'react-alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleFileUpload = ({\n  projects,\n  versions,\n  setProjects,\n  setVersions\n}) => {\n  _s();\n\n  const alert = useAlert(); // states for file, version, progress, submitting;\n\n  const [v, setV] = React.useState('');\n  const [file, setFile] = React.useState(null);\n  const [progress, setProgress] = React.useState(0);\n  const [submitting, setSubmitting] = React.useState(false);\n  console.log(file); // onChange for upload a single file\n\n  const handleSingleUpload = async e => {\n    const content = await readSingleFileContent(e.target.files[0], setProgress);\n    setFile({\n      fileName: e.target.files[0].name,\n      fileContent: content\n    });\n  }; // onChange to handle version input\n\n\n  const handleV = e => {\n    setV(e.target.value);\n\n    if (file !== null) {\n      file[\"versionNumber\"] = e.target.value;\n    } else {\n      alert.show(\"file content is null\");\n    }\n  }; // onClick to handle submitting\n\n\n  const handleSubmitting = () => {\n    setSubmitting(!submitting);\n  }; //validates inputs\n\n\n  const handleValidation = () => {\n    if (file === null) {\n      alert.show(\"You must select a file to upload!\");\n    }\n\n    if (v === '') {\n      alert.show(\" you mush enter a version number\");\n    }\n\n    if (projects.includes(file)) {\n      alert.show(\"This file already exists, please select a different one\");\n    }\n\n    if (versions.includes(v)) {\n      alert.show(\"this version number already exists, please give it a different version number\");\n    }\n  }; // onClick to setprojects setVersions\n\n\n  const handleSubmit = () => {\n    handleValidation();\n\n    if (v !== '' && file !== null && !projects.includes(file) && !versions.includes(v)) {\n      versions.push(v);\n      projects.push(file);\n      setProjects(projects);\n      setVersions(versions);\n      handleSubmitting();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoaderWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          name: \"file\",\n          type: \"file\",\n          accept: \".json\",\n          style: {\n            display: \"none\"\n          },\n          required: true,\n          onChange: handleSingleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Upload Single File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        label: \"Version Number: v1\",\n        name: \"version\",\n        value: v,\n        onChange: handleV\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        type: \"submit\",\n        onClick: () => {\n          handleSubmit();\n        },\n        disabled: submitting,\n        submit: submitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), submitting ? /*#__PURE__*/_jsxDEV(ResetButton, {\n        onClick: handleSubmitting,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 31\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), progress && submitting ? /*#__PURE__*/_jsxDEV(Line, {\n      percent: progress,\n      strokeWidth: \"1\",\n      strokeColor: Green.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 39\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleFileUpload, \"qRO3VrCED+BNtwM9r1n/qLE4HEI=\", false, function () {\n  return [useAlert];\n});\n\n_c = SingleFileUpload;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects,\n  versions: selectVersions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setProjects: data => dispatch(setProjects(data)),\n  removeFile: data => dispatch(removeFile(data)),\n  setVersions: data => dispatch(setVersions(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleFileUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleFileUpload\");","map":{"version":3,"sources":["C:/Users/Derek Reimanis/Documents/msusel/Pique-Lite/src/components/pop-up/SingleFileUpload.component.js"],"names":["React","connect","createStructuredSelector","removeFile","setProjects","setVersions","selectProjects","selectVersions","LoaderWrapper","Input","Label","SubmitButton","ResetButton","readSingleFileContent","FormInput","Line","Green","useAlert","SingleFileUpload","projects","versions","alert","v","setV","useState","file","setFile","progress","setProgress","submitting","setSubmitting","console","log","handleSingleUpload","e","content","target","files","fileName","name","fileContent","handleV","value","show","handleSubmitting","handleValidation","includes","handleSubmit","push","display","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { removeFile, setProjects, setVersions } from \"../../redux/piqueTree/PiqueTree.actions\";\nimport { selectProjects, selectVersions } from \"../../redux/piqueTree/PiqueTree.selector\";\nimport { LoaderWrapper, Input, Label, SubmitButton, ResetButton} from './SingleFileUpload.styles'\nimport { readSingleFileContent } from \"../../utils/fileUpload.utils\";\nimport FormInput from \"../formInput/FormInput.component\";\nimport {Line} from 'rc-progress';\nimport { Green } from \"../../utils/color\";\nimport { useAlert } from 'react-alert'\n\nconst SingleFileUpload = ({projects, versions, setProjects, setVersions}) => {\n    const alert = useAlert();\n    // states for file, version, progress, submitting;\n    const [v, setV] = React.useState('');\n    const [file, setFile] = React.useState(null);\n    const [progress, setProgress] = React.useState(0);\n    const [submitting, setSubmitting] = React.useState(false);\n    console.log(file)\n\n    // onChange for upload a single file\n    const handleSingleUpload = async (e) => {\n        const content = await readSingleFileContent(e.target.files[0], setProgress);\n        setFile({\n            fileName: e.target.files[0].name,\n            fileContent: content,\n        })\n    }\n\n    // onChange to handle version input\n    const handleV = e => {\n        setV(e.target.value)\n        if (file !== null) {\n            file[\"versionNumber\"]=e.target.value\n        } else{\n            alert.show(\"file content is null\")\n        }\n        \n    }\n    \n    // onClick to handle submitting\n    const handleSubmitting = () => {setSubmitting(!submitting)}\n\n    //validates inputs\n    const handleValidation = () => {\n        if (file === null ) {\n            alert.show(\"You must select a file to upload!\");\n        } \n        if (v === '') {\n            alert.show(\" you mush enter a version number\")\n        }\n        if (projects.includes(file)) {\n            alert.show(\"This file already exists, please select a different one\")\n        }\n        if (versions.includes(v)) {\n            alert.show(\"this version number already exists, please give it a different version number\")\n        }\n    }\n\n    // onClick to setprojects setVersions\n    const handleSubmit = () => {\n        handleValidation()\n        if (v !== '' && file !== null && !projects.includes(file) && !versions.includes(v)) {\n            versions.push(v);\n            projects.push(file)\n            setProjects(projects)\n            setVersions(versions)\n            handleSubmitting()\n        }\n    }\n\n    return(\n        <div> \n            <LoaderWrapper>\n                <Label>\n                     <Input\n                        name=\"file\" \n                        type='file' \n                        accept=\".json\" \n                        style={{display: \"none\"}} \n                        required\n                        onChange={handleSingleUpload}\n                    />\n                    <i>Upload Single File</i>  \n                </Label>\n           \n                <FormInput\n                    type='text' \n                    label={\"Version Number: v1\"}\n                    name=\"version\"\n                    value={v}\n                    onChange={handleV}\n                />\n                <SubmitButton\n                        type='submit' \n                        onClick={() => {handleSubmit()}}\n                        disabled={submitting}\n                        submit={submitting}\n                    >\n                        Submit\n                </SubmitButton>\n                {submitting ? <ResetButton onClick={handleSubmitting}>Reset</ResetButton> : null}\n            </LoaderWrapper>\n            {progress && submitting ? <Line percent={progress} strokeWidth=\"1\" strokeColor={Green.value}/> : null}\n        </div>\n    )\n}\nconst mapStateToProps = createStructuredSelector({\n    projects: selectProjects,\n    versions: selectVersions\n})\nconst mapDispatchToProps = dispatch => ({\n    setProjects: data => dispatch(setProjects(data)),\n    removeFile: data => dispatch(removeFile(data)),\n    setVersions: data => dispatch(setVersions(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleFileUpload);"]},"metadata":{},"sourceType":"module"}