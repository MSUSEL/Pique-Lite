{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xuying Wang Swift\\\\Desktop\\\\msu-pique-lite\\\\Pique-Lite\\\\src\\\\pages\\\\dashboardPage\\\\Dashboard.component.js\";\nimport React from 'react';\nimport { DashboardGrid, CardGroupWrapper, GroupWrapper, Group } from './Dashboard.styles';\nimport MainHeader from '../../components/mainHeader/MainHeader.component';\nimport * as CalendarChartProps from '../../charts/CalendarChartProps';\nimport * as TableChartProps from '../../charts/TableChartProps';\nimport RiskCard from '../../components/riskCard/RiskCard.component';\nimport PiqueChart from '../../charts/PiqueChart.component';\nimport { createStructuredSelector } from 'reselect';\nimport { selectProjects, selectRiskList } from '../../redux/piqueTree/PiqueTree.selector';\nimport { connect } from 'react-redux';\nimport ArrowButton from '../../components/arrowButton/ArrowButton.component';\nimport { IoSkullOutline } from 'react-icons/io5';\nimport { ImWarning } from 'react-icons/im';\nimport { RiAlarmWarningLine } from 'react-icons/ri';\nimport { RiSecurePaymentLine } from 'react-icons/ri';\nimport { CgDanger } from 'react-icons/cg';\nimport { data } from '../dashboard-data-files/CalenderData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = ({\n  projects,\n  riskList\n}) => {\n  const riskLevelOptions = [{\n    label: 'Severe',\n    value: '#cb0032',\n    icon: /*#__PURE__*/_jsxDEV(IoSkullOutline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'High',\n    value: '#ff6500',\n    icon: /*#__PURE__*/_jsxDEV(RiAlarmWarningLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Elevated',\n    value: '#fde101',\n    icon: /*#__PURE__*/_jsxDEV(CgDanger, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Guarded',\n    value: '#3566cd',\n    icon: /*#__PURE__*/_jsxDEV(ImWarning, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Low',\n    value: '#009a66',\n    icon: /*#__PURE__*/_jsxDEV(RiSecurePaymentLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 19\n    }, this)\n  }]; // vairables for line chart\n\n  const lineChartWidth = '600px';\n  const lineChartHeight = '400px';\n  const lineChartType = 'LineChart';\n  const showButton = true;\n\n  const getTitle = () => {\n    let lineChartTitle = '';\n    projects.map((file, index) => lineChartTitle = file.fileContent.name);\n    return lineChartTitle;\n  };\n\n  const getlineChartOptions = () => {\n    let options = {\n      title: getTitle(),\n      hAxis: {\n        title: getTitle() + ' ' + 'Version',\n        minValue: 0,\n        maxValue: 1\n      },\n      vAxis: {\n        title: getTitle() + ' ' + 'Score',\n        minValue: 0,\n        maxValue: 1\n      },\n      legend: 'none',\n      colors: ['#226192', '#004411'],\n      backgroundColor: 'white'\n    };\n    return options;\n  }; // get the bin data from uploajded files\n\n\n  const getBinData = () => {\n    let binData = [];\n    binData.push([\"version\", \"score\"]);\n    projects.map((file, index) => binData.push([`v${file.versionNumber}`, file.fileContent.value]));\n    return binData;\n  }; // get variable for calendar chart\n\n\n  const calWidth = '1000px';\n  const calHeight = '180px';\n  const calChartType = 'Calendar';\n  const showCalButton = false;\n  const inputData = data;\n  const options = {\n    title: getTitle(),\n    calendar: {\n      cellColor: {\n        stroke: 'grey',\n        // Color the border of the squares.\n        strokeOpacity: 0.5,\n        // Make the borders half transparent.\n        strokeWidth: 2 // ...and two pixels thick.\n\n      },\n      cellSize: '15',\n      dayOfWeekLabel: {\n        fontName: 'Times-Roman',\n        fontSize: 12,\n        color: 'black',\n        bold: false,\n        italic: true\n      },\n      focusedCellColor: {\n        stroke: 'red',\n        strokeOpacity: 0.8,\n        strokeWidth: 3\n      },\n      monthOutlineColor: {\n        stroke: '#226192',\n        strokeOpacity: 0.8,\n        strokeWidth: 2\n      },\n      underYearSpace: 10,\n      // Bottom padding for the year labels.\n      yearLabel: {\n        fontName: 'Times-Roman',\n        fontSize: 32,\n        color: '#132D72',\n        bold: true,\n        italic: true\n      }\n    },\n    colorAxis: {\n      colors: ['#ff6150', '#38b24d']\n    }\n  };\n  const card = riskList.map((file, index) => {\n    return /*#__PURE__*/_jsxDEV(RiskCard, {\n      title: file.qaName,\n      score: file.qaValue,\n      color: file.qaColor,\n      icon: file.qaIcon\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this);\n  });\n  const riskCard = riskLevelOptions.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(RiskCard, {\n      title: item.label,\n      color: item.value,\n      icon: item.icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(DashboardGrid, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      width: CalendarChartProps.width,\n      height: CalendarChartProps.height,\n      data: CalendarChartProps.inputData,\n      chartType: CalendarChartProps.chartType,\n      options: CalendarChartProps.options,\n      showButton: CalendarChartProps.showButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CardGroupWrapper, {\n        children: riskCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: projects ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ArrowButton, {\n          children: \"show projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardGroupWrapper, {\n          children: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GroupWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Group, {\n        children: projects ? /*#__PURE__*/_jsxDEV(PiqueChart, {\n          width: lineChartWidth,\n          height: lineChartHeight,\n          data: getBinData(),\n          options: getlineChartOptions(),\n          chartType: lineChartType,\n          showButton: showButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Group, {\n        children: /*#__PURE__*/_jsxDEV(PiqueChart, {\n          width: TableChartProps.width,\n          height: TableChartProps.height,\n          data: TableChartProps.inputData,\n          options: TableChartProps.options,\n          chartType: TableChartProps.chartType,\n          showButton: TableChartProps.showButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Dashboard;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects,\n  riskList: selectRiskList\n});\nexport default connect(mapStateToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Xuying Wang Swift/Desktop/msu-pique-lite/Pique-Lite/src/pages/dashboardPage/Dashboard.component.js"],"names":["React","DashboardGrid","CardGroupWrapper","GroupWrapper","Group","MainHeader","CalendarChartProps","TableChartProps","RiskCard","PiqueChart","createStructuredSelector","selectProjects","selectRiskList","connect","ArrowButton","IoSkullOutline","ImWarning","RiAlarmWarningLine","RiSecurePaymentLine","CgDanger","data","Dashboard","projects","riskList","riskLevelOptions","label","value","icon","lineChartWidth","lineChartHeight","lineChartType","showButton","getTitle","lineChartTitle","map","file","index","fileContent","name","getlineChartOptions","options","title","hAxis","minValue","maxValue","vAxis","legend","colors","backgroundColor","getBinData","binData","push","versionNumber","calWidth","calHeight","calChartType","showCalButton","inputData","calendar","cellColor","stroke","strokeOpacity","strokeWidth","cellSize","dayOfWeekLabel","fontName","fontSize","color","bold","italic","focusedCellColor","monthOutlineColor","underYearSpace","yearLabel","colorAxis","card","qaName","qaValue","qaColor","qaIcon","riskCard","item","width","height","chartType","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DashboardGrid, CardGroupWrapper, GroupWrapper, Group } from './Dashboard.styles';\r\nimport MainHeader from '../../components/mainHeader/MainHeader.component';\r\nimport * as CalendarChartProps from '../../charts/CalendarChartProps';\r\nimport * as TableChartProps from '../../charts/TableChartProps';\r\nimport RiskCard from '../../components/riskCard/RiskCard.component';\r\nimport PiqueChart from '../../charts/PiqueChart.component';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectProjects, selectRiskList } from '../../redux/piqueTree/PiqueTree.selector';\r\nimport { connect } from 'react-redux';\r\nimport ArrowButton from '../../components/arrowButton/ArrowButton.component';\r\nimport {IoSkullOutline} from 'react-icons/io5'\r\nimport {ImWarning} from 'react-icons/im';\r\nimport {RiAlarmWarningLine} from 'react-icons/ri'\r\nimport {RiSecurePaymentLine} from 'react-icons/ri'\r\nimport {CgDanger} from 'react-icons/cg';\r\n\r\nimport { data } from '../dashboard-data-files/CalenderData';\r\n\r\n\r\n\r\nconst Dashboard = ({projects, riskList}) => {\r\n    const riskLevelOptions = [   \r\n        {\r\n            label: 'Severe',\r\n            value: '#cb0032',\r\n            icon: <IoSkullOutline/>\r\n        },\r\n        {\r\n            label: 'High',\r\n            value: '#ff6500',\r\n            icon: <RiAlarmWarningLine/>\r\n        },\r\n        {\r\n            label: 'Elevated',\r\n            value: '#fde101',\r\n            icon: <CgDanger/>\r\n        },\r\n        {\r\n            label: 'Guarded',\r\n            value: '#3566cd',\r\n            icon: <ImWarning/>\r\n        },\r\n        {\r\n            label: 'Low',\r\n            value: '#009a66',\r\n            icon: <RiSecurePaymentLine/>\r\n        }  \r\n    ]\r\n\r\n    // vairables for line chart\r\n    const lineChartWidth = '600px';\r\n    const lineChartHeight = '400px';\r\n    const lineChartType = 'LineChart';\r\n    const showButton = true;\r\n\r\n    const getTitle = () => {\r\n        let lineChartTitle = '';\r\n        projects.map((file, index) => lineChartTitle = file.fileContent.name)\r\n        return lineChartTitle;\r\n    }\r\n\r\n    const getlineChartOptions = () => {\r\n        let options = {\r\n            title: getTitle(),\r\n            hAxis: { title: getTitle() + ' ' + 'Version', minValue: 0, maxValue: 1 },\r\n            vAxis: { title: getTitle() + ' ' + 'Score', minValue: 0, maxValue: 1 },\r\n            legend: 'none',\r\n            colors:['#226192','#004411'],\r\n            backgroundColor: 'white'\r\n        }\r\n        return options;\r\n    }\r\n\r\n    // get the bin data from uploajded files\r\n    const getBinData = () => {\r\n        let binData = [];\r\n        binData.push([\"version\", \"score\"]);\r\n        projects.map((file, index) => binData.push([`v${file.versionNumber}`, file.fileContent.value]));\r\n        return binData;\r\n    }\r\n\r\n    // get variable for calendar chart\r\n    const calWidth = '1000px';\r\n    const calHeight = '180px';\r\n    const calChartType = 'Calendar';\r\n    const showCalButton = false;\r\n    const inputData = data;\r\n    \r\n    const options = {\r\n        title: getTitle(),\r\n        calendar: {\r\n            cellColor: {\r\n            stroke: 'grey',      // Color the border of the squares.\r\n            strokeOpacity: 0.5, // Make the borders half transparent.\r\n            strokeWidth: 2      // ...and two pixels thick.\r\n\r\n            },\r\n            cellSize: '15',\r\n            dayOfWeekLabel: {\r\n                fontName: 'Times-Roman',\r\n                fontSize: 12,\r\n                color: 'black',\r\n                bold: false,\r\n                italic: true\r\n            },\r\n            focusedCellColor: {\r\n                stroke: 'red',\r\n                strokeOpacity: 0.8,\r\n                strokeWidth: 3\r\n            },\r\n            monthOutlineColor: {\r\n                stroke: '#226192',\r\n                strokeOpacity: 0.8,\r\n                strokeWidth: 2\r\n            },\r\n            underYearSpace: 10, // Bottom padding for the year labels.\r\n            yearLabel: {\r\n                fontName: 'Times-Roman',\r\n                fontSize: 32,\r\n                color: '#132D72',\r\n                bold: true,\r\n                italic: true\r\n            }\r\n        },\r\n        colorAxis: {colors:['#ff6150','#38b24d']}\r\n}\r\n  \r\n    const card = riskList.map((file, index) => {\r\n        return (<RiskCard title={file.qaName} score={file.qaValue} color={file.qaColor} icon={file.qaIcon} key={index}/>)\r\n    })\r\n\r\n    const riskCard = riskLevelOptions.map((item, index) => {\r\n        return (<RiskCard title={item.label} color={item.value} icon={item.icon}/>)\r\n    })\r\n\r\n    return (\r\n        <DashboardGrid>\r\n            <MainHeader\r\n                width={CalendarChartProps.width}\r\n                height={CalendarChartProps.height}\r\n                data={CalendarChartProps.inputData}\r\n                chartType={CalendarChartProps.chartType}\r\n                options={CalendarChartProps.options}\r\n                showButton={CalendarChartProps.showButton}\r\n            />\r\n            <div>\r\n                <CardGroupWrapper>{riskCard}</CardGroupWrapper>\r\n            </div>\r\n            <div>\r\n                {projects? (<div>\r\n                    <ArrowButton>show projects</ArrowButton>\r\n                    <CardGroupWrapper>\r\n                        {card}\r\n                    </CardGroupWrapper>\r\n                    </div>) : null}\r\n            \r\n            </div>\r\n            <GroupWrapper>\r\n                <Group>\r\n                    {projects ? (  \r\n                        <PiqueChart \r\n                            width={lineChartWidth}\r\n                            height={lineChartHeight}\r\n                            data={getBinData()}\r\n                            options={getlineChartOptions()}\r\n                            chartType={lineChartType}\r\n                            showButton={showButton}\r\n                    />) : null}\r\n                </Group>\r\n                <Group>\r\n                    <PiqueChart\r\n                        width={TableChartProps.width}\r\n                        height={TableChartProps.height}\r\n                        data={TableChartProps.inputData}\r\n                        options={TableChartProps.options}\r\n                        chartType={TableChartProps.chartType}\r\n                        showButton={TableChartProps.showButton}\r\n                    />\r\n                </Group>\r\n            </GroupWrapper>\r\n        </DashboardGrid>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    projects: selectProjects,\r\n    riskList: selectRiskList\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}