{"ast":null,"code":"var _jsxFileName = \"/Users/xuyingwang/Documents/Pique-Lite/src/components/pop-up/ProjectList.component.js\";\nimport { IconButton, List, ListItem, ListItemText, ListItemSecondaryAction, RootRef } from '@material-ui/core';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { setProjects } from '../../redux/piqueTree/PiqueTree.actions';\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\nimport { Buttercup, Blue, DeepKoamaru } from '../../utils/color'; // each item's styles \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItemStyles = (isDragging, draggableStyle) => ({ // styles we need to apply on draggables\n  ...draggableStyle,\n  // some basic styles to make the tiems look nicer\n  userSelect: \"none\",\n  padding: \"16px\",\n  margin: `0 0 8px 0`,\n  color: \"white\",\n  // change the background color if dragging\n  background: isDragging ? Buttercup : Blue\n}); // get list styles\n\n\nconst getListStyles = isDraggingOver => ({\n  background: isDraggingOver ? DeepKoamaru : \"lightgrey\",\n  padding: 8,\n  width: 400,\n  position: \"relative\"\n}); // a little function to help us with reordering the result\n\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nclass ProjectList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getItems = () => {\n      const result = this.props.projects.map(file => {\n        return {\n          id: `${file.versionNumber}`,\n          content: `v${file.versionNumber} ${file.fileName}`,\n          fileContent: file.fileContent,\n          versionNumber: file.versionNumber,\n          fileName: file.fileName\n        };\n      });\n      return result;\n    };\n\n    this.deleteId = index => {\n      let result = this.state.items;\n      result.splice(index, 1);\n      this.setState({\n        result\n      });\n      this.props.setProjects(result);\n    };\n\n    this.state = {\n      items: this.getItems(),\n      version: \"\"\n    };\n  } // get the data we need\n\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(this.state.items, result.source.index, result.destination.index);\n    this.setState({\n      items\n    });\n    this.props.setProjects(items);\n  }\n\n  render() {\n    console.log(this.props.projects);\n    console.log(\"I am items\", this.state.items);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: this.onDragEnd.bind(this),\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(RootRef, {\n            rootRef: provided.innerRef,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              style: getListStyles(snapshot.isDraggingOver),\n              children: [this.state.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                draggableId: item.id,\n                index: index,\n                children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(RootRef, {\n                  rootRef: provided.innerRef,\n                  children: /*#__PURE__*/_jsxDEV(ListItem, { ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    style: getItemStyles(snapshot.isDragging, provided.draggableProps.style),\n                    children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                      primary: item.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 120,\n                      columnNumber: 30\n                    }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                      onClick: this.deleteId.bind(this, index),\n                      children: /*#__PURE__*/_jsxDEV(IconButton, {\n                        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 125,\n                          columnNumber: 34\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 124,\n                        columnNumber: 32\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 30\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 112,\n                    columnNumber: 28\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 26\n                }, this)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 22\n              }, this)), provided.placeholder]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setProjects: data => dispatch(setProjects(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList);","map":{"version":3,"sources":["/Users/xuyingwang/Documents/Pique-Lite/src/components/pop-up/ProjectList.component.js"],"names":["IconButton","List","ListItem","ListItemText","ListItemSecondaryAction","RootRef","DeleteIcon","React","DragDropContext","Droppable","Draggable","connect","createStructuredSelector","setProjects","selectProjects","Buttercup","Blue","DeepKoamaru","getItemStyles","isDragging","draggableStyle","userSelect","padding","margin","color","background","getListStyles","isDraggingOver","width","position","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","ProjectList","Component","constructor","props","getItems","projects","map","file","id","versionNumber","content","fileName","fileContent","deleteId","index","state","items","setState","version","onDragEnd","destination","source","render","console","log","bind","provided","snapshot","innerRef","item","draggableProps","dragHandleProps","style","placeholder","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["\nimport { IconButton, List, ListItem, ListItemText, ListItemSecondaryAction, RootRef} from '@material-ui/core';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { setProjects } from '../../redux/piqueTree/PiqueTree.actions';\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\n\nimport {Buttercup, Blue, DeepKoamaru} from '../../utils/color';\n    // each item's styles \n    const getItemStyles = (isDragging, draggableStyle) => ({\n        // styles we need to apply on draggables\n        ...draggableStyle,\n        // some basic styles to make the tiems look nicer\n        userSelect: \"none\",\n        padding: \"16px\",\n        margin: `0 0 8px 0`,\n        color: \"white\",\n\n        // change the background color if dragging\n        background: isDragging ? Buttercup : Blue,\n    })\n    \n    // get list styles\n    const getListStyles = (isDraggingOver) => ({\n        background: isDraggingOver ? DeepKoamaru : \"lightgrey\",\n        padding: 8,\n        width: 400,\n        position: \"relative\"\n    })\n\n    // a little function to help us with reordering the result\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n    \n        return result;\n    };\n\nclass ProjectList extends React.Component {\n    constructor(props){\n        super(props);\n        this.state ={\n            items: this.getItems(),\n            version: \"\"\n        }\n    }\n   \n    // get the data we need\n    getItems = () => {\n        const result = this.props.projects.map(file => {\n            return ({\n                id: `${file.versionNumber}`,\n                content: `v${file.versionNumber} ${file.fileName}`,\n                fileContent: file.fileContent,\n                versionNumber: file.versionNumber,\n                fileName: file.fileName\n            })         \n         })\n         return result;\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) {\n          return;\n        }\n    \n        const items = reorder(\n          this.state.items,\n          result.source.index,\n          result.destination.index\n        );\n    \n        this.setState({\n          items\n        });\n\n        this.props.setProjects(items)\n      }\n\n    deleteId = index => {\n        let result = this.state.items;\n        result.splice(index, 1);\n        this.setState({result});\n        this.props.setProjects(result)\n    }\n\n    render() {\n        console.log(this.props.projects)\n        console.log(\"I am items\",this.state.items)\n        return (\n           <div>\n           <DragDropContext onDragEnd={this.onDragEnd.bind(this)}>\n           <Droppable droppableId=\"droppable\">\n             {(provided, snapshot) => (\n               <RootRef rootRef={provided.innerRef}>\n                 <List style={getListStyles(snapshot.isDraggingOver)}>\n                   {this.state.items.map((item, index) => (\n                     <Draggable\n                       key={item.id}\n                       draggableId={item.id}\n                       index={index}\n                     >\n                       {(provided, snapshot) => (\n                         <RootRef rootRef={provided.innerRef}>\n                           <ListItem\n                             {...provided.draggableProps}\n                             {...provided.dragHandleProps}\n                             style={getItemStyles(\n                               snapshot.isDragging,\n                               provided.draggableProps.style\n                             )}\n                           >\n                             <ListItemText primary={item.content} />\n                             <ListItemSecondaryAction\n                               onClick={this.deleteId.bind(this, index)}\n                             >\n                               <IconButton>\n                                 <DeleteIcon />\n                               </IconButton>\n                             </ListItemSecondaryAction>\n                           </ListItem>\n                         </RootRef>\n                       )}\n                     </Draggable>\n                   ))}\n                   {provided.placeholder}\n                 </List>\n               </RootRef>\n             )}\n           </Droppable>\n         </DragDropContext>\n           </div>\n        )\n    }\n}\nconst mapStateToProps = createStructuredSelector({\n    projects: selectProjects\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setProjects: data => dispatch(setProjects(data))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectList)"]},"metadata":{},"sourceType":"module"}