{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek Reimanis\\\\Documents\\\\msusel\\\\Pique-Lite\\\\src\\\\components\\\\treeEditor\\\\riskLevelSelect\\\\RiskLevelSelect.component.js\";\nimport React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport { Select } from './RiskLevelSelect.styles';\nimport { selectRiskLevel } from '../../../redux/piqueTree/PiqueTree.selector';\nimport { setRiskLevel } from '../../../redux/piqueTree/PiqueTree.actions';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RiskLevelSelect = ({\n  riskLevel,\n  setRiskLevel,\n  riskLevelOptions\n}) => {\n  return /*#__PURE__*/_jsxDEV(Select, {\n    value: riskLevel,\n    onChange: e => setRiskLevel(e.target.value),\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      hidden: true,\n      children: \"Risk Level\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), riskLevelOptions.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option.value,\n      children: [\" \", option.label]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 50\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n\n_c = RiskLevelSelect;\nconst mapStateToProps = createStructuredSelector({\n  riskLevel: selectRiskLevel\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setRiskLevel: level => dispatch(setRiskLevel(level))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiskLevelSelect);\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskLevelSelect\");","map":{"version":3,"sources":["C:/Users/Derek Reimanis/Documents/msusel/Pique-Lite/src/components/treeEditor/riskLevelSelect/RiskLevelSelect.component.js"],"names":["React","createStructuredSelector","Select","selectRiskLevel","setRiskLevel","connect","RiskLevelSelect","riskLevel","riskLevelOptions","e","target","value","map","option","i","label","mapStateToProps","mapDispatchToProps","dispatch","level"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAAQC,MAAR,QAAqB,0BAArB;AACA,SAAQC,eAAR,QAA8B,6CAA9B;AACA,SAAQC,YAAR,QAA2B,4CAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYH,EAAAA,YAAZ;AAA0BI,EAAAA;AAA1B,CAAD,KAAiD;AACrE,sBACI,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAED,SAAf;AAA0B,IAAA,QAAQ,EAAEE,CAAC,IAAIL,YAAY,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAArD;AAAA,4BACI;AAAQ,MAAA,KAAK,EAAC,EAAd;AAAiB,MAAA,MAAM,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKH,gBAAgB,CAACI,GAAjB,CAAqB,CAACC,MAAD,EAASC,CAAT,kBAAe;AAAgB,MAAA,KAAK,EAAED,MAAM,CAACF,KAA9B;AAAA,sBAAuCE,MAAM,CAACE,KAA9C;AAAA,OAAaD,CAAb;AAAA;AAAA;AAAA;AAAA,YAApC,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;KAAMR,e;AAWN,MAAMU,eAAe,GAAGf,wBAAwB,CAAC;AAC7CM,EAAAA,SAAS,EAAGJ;AADiC,CAAD,CAAhD;;AAIA,MAAMc,kBAAkB,GAAGC,QAAQ,KAAK;AACpCd,EAAAA,YAAY,EAAGe,KAAD,IAAWD,QAAQ,CAACd,YAAY,CAACe,KAAD,CAAb;AADG,CAAL,CAAnC;;AAIA,eAAed,OAAO,CAACW,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CX,eAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport {Select} from './RiskLevelSelect.styles'\nimport {selectRiskLevel} from '../../../redux/piqueTree/PiqueTree.selector';\nimport {setRiskLevel} from '../../../redux/piqueTree/PiqueTree.actions';\nimport { connect } from 'react-redux';\n\nconst RiskLevelSelect = ({riskLevel, setRiskLevel, riskLevelOptions}) => {\n    return (\n        <Select value={riskLevel} onChange={e => setRiskLevel(e.target.value)}>\n            <option value=\"\" hidden>\n                Risk Level\n            </option>\n            {riskLevelOptions.map((option, i) => <option key={i} value={option.value}> {option.label}</option>)}\n        </Select>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n    riskLevel : selectRiskLevel\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setRiskLevel: (level) => dispatch(setRiskLevel(level))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RiskLevelSelect)"]},"metadata":{},"sourceType":"module"}