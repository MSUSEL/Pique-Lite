{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Derek Reimanis\\\\Documents\\\\msusel\\\\Pique-Lite\\\\src\\\\components\\\\fileUploader\\\\FileUploader.component.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { FileUploaderContainer, Input, ButtonGroupContainer } from './FIleUploader.styles';\nimport EditorButton from '../editorButtion/EditorButton.component';\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\nimport { removeFile, setProjects } from '../../redux/piqueTree/PiqueTree.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileUploader = ({\n  projects,\n  setProjects,\n  removeFile\n}) => {\n  // read the contents of each file\n  const readFileContents = async file => {\n    return new Promise((resolve, reject) => {\n      let fileReader = new FileReader(); // start reading the file, once done, the result contains the content of the file as text string\n\n      fileReader.readAsText(file);\n\n      fileReader.onload = () => {\n        // result is a domstring, parse\n        resolve(JSON.parse(fileReader.result));\n      };\n\n      fileReader.onerror = reject;\n    });\n  };\n\n  const readAllFiles = async allFiles => {\n    const results = await Promise.all(allFiles.map(async file => {\n      const fileContent = await readFileContents(file);\n      return {\n        \"fileName\": file.name,\n        \"fileContent\": fileContent\n      };\n    }));\n    return results;\n  };\n\n  const handleUpload = async e => {\n    let allFiles = [];\n    [...e.target.files].map(file => allFiles.push(file));\n    const results = await readAllFiles(allFiles);\n    setProjects(results);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FileUploaderContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"file\",\n      multiple: true,\n      accept: \".json\",\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), projects ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: projects.map((f, i) => /*#__PURE__*/_jsxDEV(ButtonGroupContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: f.fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(EditorButton, {\n          onClick: () => removeFile(f),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 8\n  }, this);\n};\n\n_c = FileUploader;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setProjects: list => dispatch(setProjects(list)),\n  removeFile: file => dispatch(removeFile(file))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileUploader);\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"sources":["C:/Users/Derek Reimanis/Documents/msusel/Pique-Lite/src/components/fileUploader/FileUploader.component.js"],"names":["React","connect","createStructuredSelector","FileUploaderContainer","Input","ButtonGroupContainer","EditorButton","selectProjects","removeFile","setProjects","FileUploader","projects","readFileContents","file","Promise","resolve","reject","fileReader","FileReader","readAsText","onload","JSON","parse","result","onerror","readAllFiles","allFiles","results","all","map","fileContent","name","handleUpload","e","target","files","push","f","i","fileName","mapStateToProps","mapDispatchToProps","dispatch","list"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { FileUploaderContainer, Input, ButtonGroupContainer} from './FIleUploader.styles';\nimport EditorButton from '../editorButtion/EditorButton.component'\nimport { selectProjects } from '../../redux/piqueTree/PiqueTree.selector';\nimport { removeFile, setProjects } from '../../redux/piqueTree/PiqueTree.actions';\nconst FileUploader = ({projects, setProjects, removeFile}) => {\n    // read the contents of each file\n    const readFileContents = async (file) => {\n        return new Promise((resolve, reject) => {\n            let fileReader = new FileReader();\n            // start reading the file, once done, the result contains the content of the file as text string\n            fileReader.readAsText(file);\n            fileReader.onload = () => {\n                // result is a domstring, parse\n                resolve(JSON.parse(fileReader.result));\n            };\n            fileReader.onerror = reject;\n        })\n    }\n\n    const readAllFiles = async (allFiles) => {\n        const results = await Promise.all(\n            allFiles.map(async (file) => {\n                const fileContent = await readFileContents(file);\n                return {\n                    \"fileName\": file.name,\n                    \"fileContent\": fileContent\n                }\n            })\n        );\n        return results;\n    }\n\n    const handleUpload = async (e) => {\n        let allFiles = [];\n        [...e.target.files].map(file => allFiles.push(file));\n        const results = await readAllFiles(allFiles);\n        setProjects(results)\n    }\n   return (\n      \n       <FileUploaderContainer>\n            <h2>Upload files</h2>\n            <Input type='file' multiple={true} accept=\".json\" onChange={handleUpload}/>\n            {projects \n                ? <div>{projects.map((f, i) => \n                <ButtonGroupContainer key={i}>\n                    <p>{f.fileName}</p>\n                    <EditorButton onClick={() => removeFile(f)}>Remove</EditorButton>\n                </ButtonGroupContainer>\n                )}\n                </div> \n                : null\n            }\n       </FileUploaderContainer>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n    projects: selectProjects\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setProjects: list => dispatch(setProjects(list)),\n    removeFile: file => dispatch(removeFile(file))\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(FileUploader);"]},"metadata":{},"sourceType":"module"}