{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xuying Wang Swift\\\\Desktop\\\\msu-pique-lite\\\\Pique-Lite\\\\src\\\\components\\\\pop-up\\\\SingleFileUpload.component.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { removeFile, setProjects, setVersions } from \"../../redux/piqueTree/PiqueTree.actions\";\nimport { selectProjects, selectVersions } from \"../../redux/piqueTree/PiqueTree.selector\";\nimport { LoaderWrapper, Input, Label, SubmitButton, ResetButton } from './SingleFileUpload.styles';\nimport { readSingleFileContent } from \"../../utils/fileUpload.utils\";\nimport FormInput from \"../formInput/FormInput.component\";\nimport { Line } from 'rc-progress';\nimport { Green } from \"../../utils/color\";\nimport { useAlert } from 'react-alert';\nimport { setSingleFileContent } from '../../redux/fileInfo/FileInfo.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SingleFileUpload = ({\n  projects,\n  versions,\n  setProjects,\n  setVersions,\n  setSingleFileContent\n}) => {\n  _s();\n\n  const alert = useAlert(); // states for file, version, progress, submitting;\n\n  const [v, setV] = React.useState('');\n  const [file, setFile] = React.useState(null);\n  const [progress, setProgress] = React.useState(0);\n  const [submitting, setSubmitting] = React.useState(false);\n  console.log(file); // onChange for upload a single file\n\n  const handleSingleUpload = async e => {\n    const content = await readSingleFileContent(e.target.files[0], setProgress);\n    setFile({\n      fileName: e.target.files[0].name,\n      fileContent: content\n    });\n    setSingleFileContent(content);\n  }; // onChange to handle version input\n\n\n  const handleV = e => {\n    setV(e.target.value);\n\n    if (file !== null) {\n      file[\"versionNumber\"] = e.target.value;\n    } else {\n      alert.show(\"file content is null\");\n    }\n  }; // onClick to handle submitting\n\n\n  const handleSubmitting = () => {\n    setSubmitting(!submitting);\n  }; //validates inputs\n\n\n  const handleValidation = () => {\n    if (file === null) {\n      alert.show(\"You must select a file to upload!\");\n    }\n\n    if (v === '') {\n      alert.show(\" you mush enter a version number\");\n    }\n\n    if (projects.includes(file)) {\n      alert.show(\"This file already exists, please select a different one\");\n    }\n\n    if (versions.includes(v)) {\n      alert.show(\"this version number already exists, please give it a different version number\");\n    }\n  }; // onClick to setprojects setVersions\n\n\n  const handleSubmit = () => {\n    handleValidation();\n\n    if (v !== '' && file !== null && !projects.includes(file) && !versions.includes(v)) {\n      versions.push(v);\n      projects.push(file);\n      setProjects(projects);\n      setVersions(versions);\n      handleSubmitting();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(LoaderWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          name: \"file\",\n          type: \"file\",\n          accept: \".json\",\n          style: {\n            display: \"none\"\n          },\n          required: true,\n          onChange: handleSingleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"Upload Single File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        label: \"Version Number: v1\",\n        name: \"version\",\n        value: v,\n        onChange: handleV\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        type: \"submit\",\n        onClick: () => {\n          handleSubmit();\n        },\n        disabled: submitting,\n        submit: submitting,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), submitting ? /*#__PURE__*/_jsxDEV(ResetButton, {\n        onClick: handleSubmitting,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 31\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), progress && submitting ? /*#__PURE__*/_jsxDEV(Line, {\n      percent: progress,\n      strokeWidth: \"1\",\n      strokeColor: Green.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 39\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleFileUpload, \"qRO3VrCED+BNtwM9r1n/qLE4HEI=\", false, function () {\n  return [useAlert];\n});\n\n_c = SingleFileUpload;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects,\n  versions: selectVersions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setProjects: data => dispatch(setProjects(data)),\n  removeFile: data => dispatch(removeFile(data)),\n  setVersions: data => dispatch(setVersions(data)),\n  setSingleFileContent: file => dispatch(setSingleFileContent(file))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleFileUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleFileUpload\");","map":{"version":3,"sources":["C:/Users/Xuying Wang Swift/Desktop/msu-pique-lite/Pique-Lite/src/components/pop-up/SingleFileUpload.component.js"],"names":["React","connect","createStructuredSelector","removeFile","setProjects","setVersions","selectProjects","selectVersions","LoaderWrapper","Input","Label","SubmitButton","ResetButton","readSingleFileContent","FormInput","Line","Green","useAlert","setSingleFileContent","SingleFileUpload","projects","versions","alert","v","setV","useState","file","setFile","progress","setProgress","submitting","setSubmitting","console","log","handleSingleUpload","e","content","target","files","fileName","name","fileContent","handleV","value","show","handleSubmitting","handleValidation","includes","handleSubmit","push","display","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,QAAqD,yCAArD;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,0CAA/C;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,YAAtC,EAAoDC,WAApD,QAAsE,2BAAtE;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAAQC,oBAAR,QAAmC,uCAAnC;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,QAAX;AAAqBjB,EAAAA,WAArB;AAAkCC,EAAAA,WAAlC;AAA+Ca,EAAAA;AAA/C,CAAD,KAA0E;AAAA;;AAC/F,QAAMI,KAAK,GAAGL,QAAQ,EAAtB,CAD+F,CAE/F;;AACA,QAAM,CAACM,CAAD,EAAIC,IAAJ,IAAYxB,KAAK,CAACyB,QAAN,CAAe,EAAf,CAAlB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB3B,KAAK,CAACyB,QAAN,CAAe,IAAf,CAAxB;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B7B,KAAK,CAACyB,QAAN,CAAe,CAAf,CAAhC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8B/B,KAAK,CAACyB,QAAN,CAAe,KAAf,CAApC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAP+F,CAS/F;;AACA,QAAMQ,kBAAkB,GAAG,MAAOC,CAAP,IAAa;AACpC,UAAMC,OAAO,GAAG,MAAMvB,qBAAqB,CAACsB,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,EAAoBT,WAApB,CAA3C;AACAF,IAAAA,OAAO,CAAC;AACJY,MAAAA,QAAQ,EAAEJ,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,EAAkBE,IADxB;AAEJC,MAAAA,WAAW,EAAEL;AAFT,KAAD,CAAP;AAIAlB,IAAAA,oBAAoB,CAACkB,OAAD,CAApB;AACH,GAPD,CAV+F,CAmB/F;;;AACA,QAAMM,OAAO,GAAGP,CAAC,IAAI;AACjBX,IAAAA,IAAI,CAACW,CAAC,CAACE,MAAF,CAASM,KAAV,CAAJ;;AACA,QAAIjB,IAAI,KAAK,IAAb,EAAmB;AACfA,MAAAA,IAAI,CAAC,eAAD,CAAJ,GAAsBS,CAAC,CAACE,MAAF,CAASM,KAA/B;AACH,KAFD,MAEM;AACFrB,MAAAA,KAAK,CAACsB,IAAN,CAAW,sBAAX;AACH;AAEJ,GARD,CApB+F,CA8B/F;;;AACA,QAAMC,gBAAgB,GAAG,MAAM;AAACd,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AAA2B,GAA3D,CA/B+F,CAiC/F;;;AACA,QAAMgB,gBAAgB,GAAG,MAAM;AAC3B,QAAIpB,IAAI,KAAK,IAAb,EAAoB;AAChBJ,MAAAA,KAAK,CAACsB,IAAN,CAAW,mCAAX;AACH;;AACD,QAAIrB,CAAC,KAAK,EAAV,EAAc;AACVD,MAAAA,KAAK,CAACsB,IAAN,CAAW,kCAAX;AACH;;AACD,QAAIxB,QAAQ,CAAC2B,QAAT,CAAkBrB,IAAlB,CAAJ,EAA6B;AACzBJ,MAAAA,KAAK,CAACsB,IAAN,CAAW,yDAAX;AACH;;AACD,QAAIvB,QAAQ,CAAC0B,QAAT,CAAkBxB,CAAlB,CAAJ,EAA0B;AACtBD,MAAAA,KAAK,CAACsB,IAAN,CAAW,+EAAX;AACH;AACJ,GAbD,CAlC+F,CAiD/F;;;AACA,QAAMI,YAAY,GAAG,MAAM;AACvBF,IAAAA,gBAAgB;;AAChB,QAAIvB,CAAC,KAAK,EAAN,IAAYG,IAAI,KAAK,IAArB,IAA6B,CAACN,QAAQ,CAAC2B,QAAT,CAAkBrB,IAAlB,CAA9B,IAAyD,CAACL,QAAQ,CAAC0B,QAAT,CAAkBxB,CAAlB,CAA9D,EAAoF;AAChFF,MAAAA,QAAQ,CAAC4B,IAAT,CAAc1B,CAAd;AACAH,MAAAA,QAAQ,CAAC6B,IAAT,CAAcvB,IAAd;AACAtB,MAAAA,WAAW,CAACgB,QAAD,CAAX;AACAf,MAAAA,WAAW,CAACgB,QAAD,CAAX;AACAwB,MAAAA,gBAAgB;AACnB;AACJ,GATD;;AAWA,sBACI;AAAA,4BACI,QAAC,aAAD;AAAA,8BACI,QAAC,KAAD;AAAA,gCACK,QAAC,KAAD;AACG,UAAA,IAAI,EAAC,MADR;AAEG,UAAA,IAAI,EAAC,MAFR;AAGG,UAAA,MAAM,EAAC,OAHV;AAIG,UAAA,KAAK,EAAE;AAACK,YAAAA,OAAO,EAAE;AAAV,WAJV;AAKG,UAAA,QAAQ,MALX;AAMG,UAAA,QAAQ,EAAEhB;AANb;AAAA;AAAA;AAAA;AAAA,gBADL,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAaI,QAAC,SAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAE,oBAFX;AAGI,QAAA,IAAI,EAAC,SAHT;AAII,QAAA,KAAK,EAAEX,CAJX;AAKI,QAAA,QAAQ,EAAEmB;AALd;AAAA;AAAA;AAAA;AAAA,cAbJ,eAoBI,QAAC,YAAD;AACQ,QAAA,IAAI,EAAC,QADb;AAEQ,QAAA,OAAO,EAAE,MAAM;AAACM,UAAAA,YAAY;AAAG,SAFvC;AAGQ,QAAA,QAAQ,EAAElB,UAHlB;AAIQ,QAAA,MAAM,EAAEA,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBJ,EA4BKA,UAAU,gBAAG,QAAC,WAAD;AAAa,QAAA,OAAO,EAAEe,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,GAAiE,IA5BhF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EA+BKjB,QAAQ,IAAIE,UAAZ,gBAAyB,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEF,QAAf;AAAyB,MAAA,WAAW,EAAC,GAArC;AAAyC,MAAA,WAAW,EAAEZ,KAAK,CAAC2B;AAA5D;AAAA;AAAA;AAAA;AAAA,YAAzB,GAAgG,IA/BrG;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH,CAhGD;;GAAMxB,gB;UACYF,Q;;;KADZE,gB;AAiGN,MAAMgC,eAAe,GAAGjD,wBAAwB,CAAC;AAC7CkB,EAAAA,QAAQ,EAAEd,cADmC;AAE7Ce,EAAAA,QAAQ,EAAEd;AAFmC,CAAD,CAAhD;;AAIA,MAAM6C,kBAAkB,GAAGC,QAAQ,KAAK;AACpCjD,EAAAA,WAAW,EAAEkD,IAAI,IAAID,QAAQ,CAACjD,WAAW,CAACkD,IAAD,CAAZ,CADO;AAEpCnD,EAAAA,UAAU,EAAEmD,IAAI,IAAID,QAAQ,CAAClD,UAAU,CAACmD,IAAD,CAAX,CAFQ;AAGpCjD,EAAAA,WAAW,EAAEiD,IAAI,IAAID,QAAQ,CAAChD,WAAW,CAACiD,IAAD,CAAZ,CAHO;AAIpCpC,EAAAA,oBAAoB,EAAEQ,IAAI,IAAI2B,QAAQ,CAACnC,oBAAoB,CAACQ,IAAD,CAArB;AAJF,CAAL,CAAnC;;AAMA,eAAezB,OAAO,CAACkD,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CjC,gBAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { removeFile, setProjects, setVersions } from \"../../redux/piqueTree/PiqueTree.actions\";\r\nimport { selectProjects, selectVersions } from \"../../redux/piqueTree/PiqueTree.selector\";\r\nimport { LoaderWrapper, Input, Label, SubmitButton, ResetButton} from './SingleFileUpload.styles'\r\nimport { readSingleFileContent } from \"../../utils/fileUpload.utils\";\r\nimport FormInput from \"../formInput/FormInput.component\";\r\nimport {Line} from 'rc-progress';\r\nimport { Green } from \"../../utils/color\";\r\nimport { useAlert } from 'react-alert';\r\nimport {setSingleFileContent} from '../../redux/fileInfo/FileInfo.actions'\r\n\r\nconst SingleFileUpload = ({projects, versions, setProjects, setVersions, setSingleFileContent}) => {\r\n    const alert = useAlert();\r\n    // states for file, version, progress, submitting;\r\n    const [v, setV] = React.useState('');\r\n    const [file, setFile] = React.useState(null);\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [submitting, setSubmitting] = React.useState(false);\r\n    console.log(file)\r\n\r\n    // onChange for upload a single file\r\n    const handleSingleUpload = async (e) => {\r\n        const content = await readSingleFileContent(e.target.files[0], setProgress);\r\n        setFile({\r\n            fileName: e.target.files[0].name,\r\n            fileContent: content,\r\n        })\r\n        setSingleFileContent(content)\r\n    }\r\n\r\n    // onChange to handle version input\r\n    const handleV = e => {\r\n        setV(e.target.value)\r\n        if (file !== null) {\r\n            file[\"versionNumber\"]=e.target.value\r\n        } else{\r\n            alert.show(\"file content is null\")\r\n        }\r\n        \r\n    }\r\n    \r\n    // onClick to handle submitting\r\n    const handleSubmitting = () => {setSubmitting(!submitting)}\r\n\r\n    //validates inputs\r\n    const handleValidation = () => {\r\n        if (file === null ) {\r\n            alert.show(\"You must select a file to upload!\");\r\n        } \r\n        if (v === '') {\r\n            alert.show(\" you mush enter a version number\")\r\n        }\r\n        if (projects.includes(file)) {\r\n            alert.show(\"This file already exists, please select a different one\")\r\n        }\r\n        if (versions.includes(v)) {\r\n            alert.show(\"this version number already exists, please give it a different version number\")\r\n        }\r\n    }\r\n\r\n    // onClick to setprojects setVersions\r\n    const handleSubmit = () => {\r\n        handleValidation()\r\n        if (v !== '' && file !== null && !projects.includes(file) && !versions.includes(v)) {\r\n            versions.push(v);\r\n            projects.push(file)\r\n            setProjects(projects)\r\n            setVersions(versions)\r\n            handleSubmitting()\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div> \r\n            <LoaderWrapper>\r\n                <Label>\r\n                     <Input\r\n                        name=\"file\" \r\n                        type='file' \r\n                        accept=\".json\" \r\n                        style={{display: \"none\"}} \r\n                        required\r\n                        onChange={handleSingleUpload}\r\n                    />\r\n                    <i>Upload Single File</i>  \r\n                </Label>\r\n           \r\n                <FormInput\r\n                    type='text' \r\n                    label={\"Version Number: v1\"}\r\n                    name=\"version\"\r\n                    value={v}\r\n                    onChange={handleV}\r\n                />\r\n                <SubmitButton\r\n                        type='submit' \r\n                        onClick={() => {handleSubmit()}}\r\n                        disabled={submitting}\r\n                        submit={submitting}\r\n                    >\r\n                        Submit\r\n                </SubmitButton>\r\n                {submitting ? <ResetButton onClick={handleSubmitting}>Reset</ResetButton> : null}\r\n            </LoaderWrapper>\r\n            {progress && submitting ? <Line percent={progress} strokeWidth=\"1\" strokeColor={Green.value}/> : null}\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = createStructuredSelector({\r\n    projects: selectProjects,\r\n    versions: selectVersions\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    setProjects: data => dispatch(setProjects(data)),\r\n    removeFile: data => dispatch(removeFile(data)),\r\n    setVersions: data => dispatch(setVersions(data)),\r\n    setSingleFileContent: file => dispatch(setSingleFileContent(file))\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleFileUpload);"]},"metadata":{},"sourceType":"module"}