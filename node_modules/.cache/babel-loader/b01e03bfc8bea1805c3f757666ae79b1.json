{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Xuying Wang Swift\\\\Desktop\\\\msu-pique-lite\\\\Pique-Lite\\\\src\\\\pages\\\\dashboardPage\\\\Dashboard.component.js\";\nimport React from 'react';\nimport { DashboardGrid, CardGroupWrapper, GroupWrapper, Group } from './Dashboard.styles';\nimport MainHeader from '../../components/mainHeader/MainHeader.component';\nimport * as CalendarChartProps from '../../charts/CalendarChartProps';\nimport * as LineChartProps from '../../charts/LineChartProps';\nimport * as TableChartProps from '../../charts/TableChartProps';\nimport RiskCard from '../../components/riskCard/RiskCard.component';\nimport PiqueChart from '../../charts/PiqueChart.component';\nimport { createStructuredSelector } from 'reselect';\nimport { selectProjects, selectRiskList } from '../../redux/piqueTree/PiqueTree.selector';\nimport { connect } from 'react-redux';\nimport ArrowButton from '../../components/arrowButton/ArrowButton.component';\nimport { IoSkullOutline } from 'react-icons/io5';\nimport { ImWarning } from 'react-icons/im';\nimport { RiAlarmWarningLine } from 'react-icons/ri';\nimport { RiSecurePaymentLine } from 'react-icons/ri';\nimport { CgDanger } from 'react-icons/cg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = ({\n  projects,\n  riskList\n}) => {\n  const riskLevelOptions = [{\n    label: 'Severe',\n    value: '#cb0032',\n    icon: /*#__PURE__*/_jsxDEV(IoSkullOutline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'High',\n    value: '#ff6500',\n    icon: /*#__PURE__*/_jsxDEV(RiAlarmWarningLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Elevated',\n    value: '#fde101',\n    icon: /*#__PURE__*/_jsxDEV(CgDanger, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Guarded',\n    value: '#3566cd',\n    icon: /*#__PURE__*/_jsxDEV(ImWarning, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this)\n  }, {\n    label: 'Low',\n    value: '#009a66',\n    icon: /*#__PURE__*/_jsxDEV(RiSecurePaymentLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }, this)\n  }]; // vairables for line chart\n\n  const lineWidth = '600px';\n  const lineHeight = '400px';\n  const lineChartType = 'LineChart';\n  const showButton = true;\n  const lineChartTitle = projects[0].fileContent.name;\n  const lineChartOptions = {\n    title: lineChartTitle,\n    hAxis: {\n      title: 'Version',\n      minValue: 0,\n      maxValue: 1\n    },\n    vAxis: {\n      title: 'Score',\n      minValue: 0,\n      maxValue: 1\n    },\n    legend: 'none',\n    colors: ['#226192', '#004411'],\n    backgroundColor: 'white'\n  }; // get the bin data from uploajded files\n\n  const getBinData = () => {\n    let binData = [];\n    binData.push([\"version\", \"score\"]);\n    projects.map((file, index) => binData.push([`v${file.versionNumber}`, file.fileContent.value]));\n    return binData;\n  };\n\n  const getLineChartOptions = () => {\n    const title = title ? projects[0].fileContent.name : \"Total Quality Score\";\n    let options = {};\n    options = {\n      title: title,\n      hAxis: {\n        title: 'Version',\n        minValue: 0,\n        maxValue: 1\n      },\n      vAxis: {\n        title: 'Score',\n        minValue: 0,\n        maxValue: 1\n      },\n      legend: 'none',\n      colors: ['#226192', '#004411'],\n      backgroundColor: 'white'\n    };\n    return options;\n  };\n\n  const card = riskList.map((file, index) => {\n    return /*#__PURE__*/_jsxDEV(RiskCard, {\n      title: file.qaName,\n      score: file.qaValue,\n      color: file.qaColor,\n      icon: file.qaIcon\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this);\n  });\n  const riskCard = riskLevelOptions.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(RiskCard, {\n      title: item.label,\n      color: item.value,\n      icon: item.icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(DashboardGrid, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      width: CalendarChartProps.width,\n      height: CalendarChartProps.height,\n      data: CalendarChartProps.inputData,\n      chartType: CalendarChartProps.chartType,\n      options: CalendarChartProps.options,\n      showButton: CalendarChartProps.showButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CardGroupWrapper, {\n        children: riskCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: projects ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ArrowButton, {\n          children: \"show projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CardGroupWrapper, {\n          children: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GroupWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Group, {\n        children: /*#__PURE__*/_jsxDEV(PiqueChart, {\n          width: LineChartProps.width,\n          height: LineChartProps.height,\n          data: getBinData(),\n          options: LineChartProps.options,\n          chartType: LineChartProps.chartType,\n          showButton: LineChartProps.showButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Group, {\n        children: /*#__PURE__*/_jsxDEV(PiqueChart, {\n          width: TableChartProps.width,\n          height: TableChartProps.height,\n          data: TableChartProps.inputData,\n          options: TableChartProps.options,\n          chartType: TableChartProps.chartType,\n          showButton: TableChartProps.showButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Dashboard;\nconst mapStateToProps = createStructuredSelector({\n  projects: selectProjects,\n  riskList: selectRiskList\n});\nexport default connect(mapStateToProps)(Dashboard);\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/Xuying Wang Swift/Desktop/msu-pique-lite/Pique-Lite/src/pages/dashboardPage/Dashboard.component.js"],"names":["React","DashboardGrid","CardGroupWrapper","GroupWrapper","Group","MainHeader","CalendarChartProps","LineChartProps","TableChartProps","RiskCard","PiqueChart","createStructuredSelector","selectProjects","selectRiskList","connect","ArrowButton","IoSkullOutline","ImWarning","RiAlarmWarningLine","RiSecurePaymentLine","CgDanger","Dashboard","projects","riskList","riskLevelOptions","label","value","icon","lineWidth","lineHeight","lineChartType","showButton","lineChartTitle","fileContent","name","lineChartOptions","title","hAxis","minValue","maxValue","vAxis","legend","colors","backgroundColor","getBinData","binData","push","map","file","index","versionNumber","getLineChartOptions","options","card","qaName","qaValue","qaColor","qaIcon","riskCard","item","width","height","inputData","chartType","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DashboardGrid, CardGroupWrapper, GroupWrapper, Group } from './Dashboard.styles';\r\nimport MainHeader from '../../components/mainHeader/MainHeader.component';\r\nimport * as CalendarChartProps from '../../charts/CalendarChartProps';\r\nimport * as LineChartProps from '../../charts/LineChartProps';\r\nimport * as TableChartProps from '../../charts/TableChartProps';\r\nimport RiskCard from '../../components/riskCard/RiskCard.component';\r\nimport PiqueChart from '../../charts/PiqueChart.component';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectProjects, selectRiskList } from '../../redux/piqueTree/PiqueTree.selector';\r\nimport { connect } from 'react-redux';\r\nimport ArrowButton from '../../components/arrowButton/ArrowButton.component';\r\nimport {IoSkullOutline} from 'react-icons/io5'\r\nimport {ImWarning} from 'react-icons/im';\r\nimport {RiAlarmWarningLine} from 'react-icons/ri'\r\nimport {RiSecurePaymentLine} from 'react-icons/ri'\r\nimport {CgDanger} from 'react-icons/cg';\r\n\r\n\r\n\r\nconst Dashboard = ({projects, riskList}) => {\r\n    const riskLevelOptions = [   \r\n        {\r\n            label: 'Severe',\r\n            value: '#cb0032',\r\n            icon: <IoSkullOutline/>\r\n        },\r\n        {\r\n            label: 'High',\r\n            value: '#ff6500',\r\n            icon: <RiAlarmWarningLine/>\r\n        },\r\n        {\r\n            label: 'Elevated',\r\n            value: '#fde101',\r\n            icon: <CgDanger/>\r\n        },\r\n        {\r\n            label: 'Guarded',\r\n            value: '#3566cd',\r\n            icon: <ImWarning/>\r\n        },\r\n        {\r\n            label: 'Low',\r\n            value: '#009a66',\r\n            icon: <RiSecurePaymentLine/>\r\n        }  \r\n    ]\r\n\r\n    // vairables for line chart\r\n    const lineWidth = '600px';\r\n    const lineHeight = '400px';\r\n    const lineChartType = 'LineChart';\r\n    const showButton = true;\r\n    const lineChartTitle = projects[0].fileContent.name;\r\n    const lineChartOptions = {\r\n        title: lineChartTitle,\r\n        hAxis: { title: 'Version', minValue: 0, maxValue: 1 },\r\n        vAxis: { title: 'Score', minValue: 0, maxValue: 1 },\r\n        legend: 'none',\r\n        colors:['#226192','#004411'],\r\n        backgroundColor: 'white'\r\n    }\r\n\r\n    \r\n    // get the bin data from uploajded files\r\n    const getBinData = () => {\r\n        let binData = [];\r\n        binData.push([\"version\", \"score\"]);\r\n        projects.map((file, index) => binData.push([`v${file.versionNumber}`, file.fileContent.value]));\r\n        return binData;\r\n    }\r\n\r\n    const getLineChartOptions = () => {\r\n        const title = title ? projects[0].fileContent.name : \"Total Quality Score\";\r\n        let options = {};\r\n        options = {\r\n            title: title,\r\n            hAxis: { title: 'Version', minValue: 0, maxValue: 1 },\r\n            vAxis: { title: 'Score', minValue: 0, maxValue: 1 },\r\n            legend: 'none',\r\n            colors:['#226192','#004411'],\r\n            backgroundColor: 'white'\r\n        }\r\n        return options;\r\n    }\r\n    \r\n    const card = riskList.map((file, index) => {\r\n        return (<RiskCard title={file.qaName} score={file.qaValue} color={file.qaColor} icon={file.qaIcon} key={index}/>)\r\n    })\r\n\r\n    const riskCard = riskLevelOptions.map((item, index) => {\r\n        return (<RiskCard title={item.label} color={item.value} icon={item.icon}/>)\r\n    })\r\n\r\n    return (\r\n        <DashboardGrid>\r\n            <MainHeader\r\n                width={CalendarChartProps.width}\r\n                height={CalendarChartProps.height}\r\n                data={CalendarChartProps.inputData}\r\n                chartType={CalendarChartProps.chartType}\r\n                options={CalendarChartProps.options}\r\n                showButton={CalendarChartProps.showButton}\r\n            />\r\n            <div>\r\n                <CardGroupWrapper>{riskCard}</CardGroupWrapper>\r\n            </div>\r\n            <div>\r\n                {projects? (<div>\r\n                    <ArrowButton>show projects</ArrowButton>\r\n                    <CardGroupWrapper>\r\n                        {card}\r\n                    </CardGroupWrapper>\r\n                    </div>) : null}\r\n            \r\n            </div>\r\n\r\n            \r\n            <GroupWrapper>\r\n                <Group>\r\n                    <PiqueChart \r\n                        width={LineChartProps.width}\r\n                        height={LineChartProps.height}\r\n                        data={getBinData()}\r\n                        options={LineChartProps.options}\r\n                        chartType={LineChartProps.chartType}\r\n                        showButton={LineChartProps.showButton}\r\n                    />\r\n                </Group>\r\n                <Group>\r\n                    <PiqueChart\r\n                        width={TableChartProps.width}\r\n                        height={TableChartProps.height}\r\n                        data={TableChartProps.inputData}\r\n                        options={TableChartProps.options}\r\n                        chartType={TableChartProps.chartType}\r\n                        showButton={TableChartProps.showButton}\r\n                    />\r\n                </Group>\r\n            </GroupWrapper>\r\n        </DashboardGrid>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    projects: selectProjects,\r\n    riskList: selectRiskList\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard)"]},"metadata":{},"sourceType":"module"}